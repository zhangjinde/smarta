!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BIND_TIMEOUT	auth.c	/^#define BIND_TIMEOUT /;"	d	file:
CONNECT_TIMEOUT	conn.c	/^#define CONNECT_TIMEOUT /;"	d	file:
DEFAULT_SEND_QUEUE_MAX	conn.c	/^#define DEFAULT_SEND_QUEUE_MAX /;"	d	file:
DEFAULT_TIMEOUT	event.c	/^#define DEFAULT_TIMEOUT /;"	d	file:
DISCONNECT_TIMEOUT	conn.c	/^#define DISCONNECT_TIMEOUT /;"	d	file:
DP_C_LDOUBLE	snprintf.c	/^#define DP_C_LDOUBLE /;"	d	file:
DP_C_LONG	snprintf.c	/^#define DP_C_LONG /;"	d	file:
DP_C_SHORT	snprintf.c	/^#define DP_C_SHORT /;"	d	file:
DP_F_MINUS	snprintf.c	/^#define DP_F_MINUS /;"	d	file:
DP_F_NUM	snprintf.c	/^#define DP_F_NUM /;"	d	file:
DP_F_PLUS	snprintf.c	/^#define DP_F_PLUS /;"	d	file:
DP_F_SPACE	snprintf.c	/^#define DP_F_SPACE /;"	d	file:
DP_F_UNSIGNED	snprintf.c	/^#define DP_F_UNSIGNED /;"	d	file:
DP_F_UP	snprintf.c	/^#define DP_F_UP /;"	d	file:
DP_F_ZERO	snprintf.c	/^#define DP_F_ZERO /;"	d	file:
DP_S_CONV	snprintf.c	/^#define DP_S_CONV /;"	d	file:
DP_S_DEFAULT	snprintf.c	/^#define DP_S_DEFAULT /;"	d	file:
DP_S_DONE	snprintf.c	/^#define DP_S_DONE /;"	d	file:
DP_S_DOT	snprintf.c	/^#define DP_S_DOT /;"	d	file:
DP_S_FLAGS	snprintf.c	/^#define DP_S_FLAGS /;"	d	file:
DP_S_MAX	snprintf.c	/^#define DP_S_MAX /;"	d	file:
DP_S_MIN	snprintf.c	/^#define DP_S_MIN /;"	d	file:
DP_S_MOD	snprintf.c	/^#define DP_S_MOD /;"	d	file:
ECONNABORTED	event.c	/^#define ECONNABORTED /;"	d	file:
ECONNRESET	event.c	/^#define ECONNRESET /;"	d	file:
ETIMEDOUT	event.c	/^#define ETIMEDOUT /;"	d	file:
F1	md5.c	/^#define F1(/;"	d	file:
F2	md5.c	/^#define F2(/;"	d	file:
F3	md5.c	/^#define F3(/;"	d	file:
F4	md5.c	/^#define F4(/;"	d	file:
FEATURES_TIMEOUT	auth.c	/^#define FEATURES_TIMEOUT /;"	d	file:
GET_32BIT_LSB_FIRST	md5.c	/^#define GET_32BIT_LSB_FIRST(/;"	d	file:
HAVE_STDARGS	snprintf.c	/^#  undef HAVE_STDARGS$/;"	d	file:
HAVE_STDARGS	snprintf.c	/^# define HAVE_STDARGS /;"	d	file:
HAVE_STDARG_H	snprintf.c	/^#define HAVE_STDARG_H /;"	d	file:
HAVE_VARARGS_H	snprintf.c	/^#define HAVE_VARARGS_H$/;"	d	file:
LDOUBLE	snprintf.c	/^#define LDOUBLE /;"	d	file:
LEGACY_TIMEOUT	auth.c	/^#define LEGACY_TIMEOUT /;"	d	file:
LIBXMPP_VERSION_MAJOR	ctx.c	/^#define LIBXMPP_VERSION_MAJOR /;"	d	file:
LIBXMPP_VERSION_MINOR	ctx.c	/^#define LIBXMPP_VERSION_MINOR /;"	d	file:
LONG_STRING	snprintf.c	/^#define LONG_STRING /;"	d	file:
MAX	snprintf.c	/^#define MAX(/;"	d	file:
MD5Context	md5.h	/^struct MD5Context {$/;"	s
MD5DumpBytes	md5.c	/^void MD5DumpBytes(unsigned char *b, int len)$/;"	f
MD5Final	md5.c	/^void MD5Final(unsigned char digest[16], struct MD5Context *ctx)$/;"	f
MD5Init	md5.c	/^void MD5Init(struct MD5Context *ctx)$/;"	f
MD5STEP	md5.c	/^#define MD5STEP(/;"	d	file:
MD5Transform	md5.c	/^void MD5Transform(uint32_t buf[4], const unsigned char inext[64],$/;"	f
MD5Update	md5.c	/^void MD5Update(struct MD5Context *ctx, unsigned char const *buf, uint32_t len)$/;"	f
MD5_H	md5.h	/^#define MD5_H$/;"	d
MIN	snprintf.c	/^#define MIN(/;"	d	file:
PUT_32BIT_LSB_FIRST	md5.c	/^#define PUT_32BIT_LSB_FIRST(/;"	d	file:
R0	sha1.c	/^#define R0(/;"	d	file:
R1	sha1.c	/^#define R1(/;"	d	file:
R2	sha1.c	/^#define R2(/;"	d	file:
R3	sha1.c	/^#define R3(/;"	d	file:
R4	sha1.c	/^#define R4(/;"	d	file:
SASL_MASK_ANONYMOUS	common.h	/^#define SASL_MASK_ANONYMOUS /;"	d
SASL_MASK_DIGESTMD5	common.h	/^#define SASL_MASK_DIGESTMD5 /;"	d
SASL_MASK_PLAIN	common.h	/^#define SASL_MASK_PLAIN /;"	d
SECURITY_WIN32	tls_schannel.c	/^#define SECURITY_WIN32$/;"	d	file:
SESSION_TIMEOUT	auth.c	/^#define SESSION_TIMEOUT /;"	d	file:
SHA1_CTX	sha1.h	/^} SHA1_CTX;$/;"	t	typeref:struct:__anon8
SHA1_DIGEST_SIZE	sha1.h	/^#define SHA1_DIGEST_SIZE /;"	d
SHA1_Final	sha1.c	/^void SHA1_Final(SHA1_CTX* context, uint8_t digest[SHA1_DIGEST_SIZE])$/;"	f
SHA1_Init	sha1.c	/^void SHA1_Init(SHA1_CTX* context)$/;"	f
SHA1_Transform	sha1.c	/^void SHA1_Transform(uint32_t state[5], const uint8_t buffer[64])$/;"	f
SHA1_Update	sha1.c	/^void SHA1_Update(SHA1_CTX* context, const uint8_t* data, const size_t len)$/;"	f
SHAPrintContext	sha1.c	/^void SHAPrintContext(SHA1_CTX *context, char *msg){$/;"	f
VA_END	snprintf.c	/^#  define VA_END /;"	d	file:
VA_END	snprintf.c	/^# define VA_END /;"	d	file:
VA_LOCAL_DECL	snprintf.c	/^#  define VA_LOCAL_DECL /;"	d	file:
VA_LOCAL_DECL	snprintf.c	/^# define VA_LOCAL_DECL /;"	d	file:
VA_SHIFT	snprintf.c	/^#  define VA_SHIFT(/;"	d	file:
VA_SHIFT	snprintf.c	/^# define VA_SHIFT(/;"	d	file:
VA_START	snprintf.c	/^#  define VA_START(/;"	d	file:
VA_START	snprintf.c	/^# define VA_START(/;"	d	file:
XMPP_LOOP_NOTSTARTED	common.h	/^    XMPP_LOOP_NOTSTARTED,$/;"	e	enum:__anon1
XMPP_LOOP_QUIT	common.h	/^    XMPP_LOOP_QUIT$/;"	e	enum:__anon1
XMPP_LOOP_RUNNING	common.h	/^    XMPP_LOOP_RUNNING,$/;"	e	enum:__anon1
XMPP_STANZA_TAG	common.h	/^    XMPP_STANZA_TAG$/;"	e	enum:__anon7
XMPP_STANZA_TEXT	common.h	/^    XMPP_STANZA_TEXT,$/;"	e	enum:__anon7
XMPP_STANZA_UNKNOWN	common.h	/^    XMPP_STANZA_UNKNOWN,$/;"	e	enum:__anon7
XMPP_STATE_CONNECTED	common.h	/^    XMPP_STATE_CONNECTED$/;"	e	enum:__anon2
XMPP_STATE_CONNECTING	common.h	/^    XMPP_STATE_CONNECTING,$/;"	e	enum:__anon2
XMPP_STATE_DISCONNECTED	common.h	/^    XMPP_STATE_DISCONNECTED,$/;"	e	enum:__anon2
__LIBSTROPHE_COMMON_H__	common.h	/^#define __LIBSTROPHE_COMMON_H__$/;"	d
__LIBSTROPHE_HASH_H__	hash.h	/^#define __LIBSTROPHE_HASH_H__$/;"	d
__LIBSTROPHE_PARSER_H__	parser.h	/^#define __LIBSTROPHE_PARSER_H__$/;"	d
__LIBSTROPHE_SASL_H__	sasl.h	/^#define __LIBSTROPHE_SASL_H__$/;"	d
__LIBSTROPHE_SOCK_H__	sock.h	/^#define __LIBSTROPHE_SOCK_H__$/;"	d
__LIBSTROPHE_TLS_H__	tls.h	/^#define __LIBSTROPHE_TLS_H__$/;"	d
__LIBSTROPHE_UTIL_H__	util.h	/^#define __LIBSTROPHE_UTIL_H__$/;"	d
__SHA1_H	sha1.h	/^#define __SHA1_H$/;"	d
_add_key	sasl.c	/^static char *_add_key(xmpp_ctx_t *ctx, hash_t *table, const char *key, $/;"	f	file:
_auth	auth.c	/^static void _auth(xmpp_conn_t * const conn)$/;"	f	file:
_base64_charmap	sasl.c	/^static const char _base64_charmap[65] = {$/;"	v	file:
_base64_invcharmap	sasl.c	/^static const char _base64_invcharmap[256] = {$/;"	v	file:
_characters	parser_expat.c	/^static void _characters(void *userdata, const XML_Char *s, int len)$/;"	f	file:
_characters	parser_libxml2.c	/^static void _characters(void *userdata, const xmlChar *chr, int len)$/;"	f	file:
_class	sock.c	/^	unsigned short _class;$/;"	m	struct:dnsquery_resourcerecord	file:
_digest_to_hex	sasl.c	/^static void _digest_to_hex(const char *digest, char *hex)$/;"	f	file:
_disconnect_cleanup	conn.c	/^static int _disconnect_cleanup(xmpp_conn_t * const conn, $/;"	f	file:
_end_element	parser_expat.c	/^static void _end_element(void *userdata, const XML_Char *name)$/;"	f	file:
_end_element	parser_libxml2.c	/^static void _end_element(void *userdata, const xmlChar *name)$/;"	f	file:
_free	ctx.c	/^static void _free(void *p, void * const userdata)$/;"	f	file:
_get_authid	auth.c	/^static char *_get_authid(xmpp_conn_t * const conn)$/;"	f	file:
_get_stream_attribute	conn.c	/^static char *_get_stream_attribute(char **attrs, char *name)$/;"	f	file:
_handle_bind	auth.c	/^static int _handle_bind(xmpp_conn_t * const conn,$/;"	f	file:
_handle_digestmd5_challenge	auth.c	/^static int _handle_digestmd5_challenge(xmpp_conn_t * const conn,$/;"	f	file:
_handle_digestmd5_rspauth	auth.c	/^static int _handle_digestmd5_rspauth(xmpp_conn_t * const conn,$/;"	f	file:
_handle_error	auth.c	/^static int _handle_error(xmpp_conn_t * const conn,$/;"	f	file:
_handle_features	auth.c	/^static int _handle_features(xmpp_conn_t * const conn,$/;"	f	file:
_handle_features_sasl	auth.c	/^static int _handle_features_sasl(xmpp_conn_t * const conn,$/;"	f	file:
_handle_legacy	auth.c	/^static int _handle_legacy(xmpp_conn_t * const conn,$/;"	f	file:
_handle_missing_bind	auth.c	/^static int _handle_missing_bind(xmpp_conn_t * const conn,$/;"	f	file:
_handle_missing_features	auth.c	/^static int _handle_missing_features(xmpp_conn_t * const conn,$/;"	f	file:
_handle_missing_features_sasl	auth.c	/^static int _handle_missing_features_sasl(xmpp_conn_t * const conn,$/;"	f	file:
_handle_missing_legacy	auth.c	/^static int _handle_missing_legacy(xmpp_conn_t * const conn,$/;"	f	file:
_handle_missing_session	auth.c	/^static int _handle_missing_session(xmpp_conn_t * const conn,$/;"	f	file:
_handle_open_sasl	auth.c	/^static void _handle_open_sasl(xmpp_conn_t * const conn)$/;"	f	file:
_handle_proceedtls_default	auth.c	/^static int _handle_proceedtls_default(xmpp_conn_t * const conn,$/;"	f	file:
_handle_sasl_result	auth.c	/^static int _handle_sasl_result(xmpp_conn_t * const conn,$/;"	f	file:
_handle_session	auth.c	/^static int _handle_session(xmpp_conn_t * const conn,$/;"	f	file:
_handle_stream_end	conn.c	/^static void _handle_stream_end(char *name,$/;"	f	file:
_handle_stream_stanza	conn.c	/^static void _handle_stream_stanza(xmpp_stanza_t *stanza,$/;"	f	file:
_handle_stream_start	conn.c	/^static void _handle_stream_start(char *name, char **attrs, $/;"	f	file:
_handler_add	handler.c	/^static void _handler_add(xmpp_conn_t * const conn,$/;"	f	file:
_hash_iterator_t	hash.c	/^struct _hash_iterator_t {$/;"	s	file:
_hash_key	hash.c	/^static int _hash_key(hash_t *table, const char *key)$/;"	f	file:
_hash_t	hash.c	/^struct _hash_t {$/;"	s	file:
_hashentry_t	hash.c	/^struct _hashentry_t {$/;"	s	file:
_id_handler_add	handler.c	/^static void _id_handler_add(xmpp_conn_t * const conn,$/;"	f	file:
_in_progress	sock.c	/^static int _in_progress(int error)$/;"	f	file:
_log_open_tag	conn.c	/^static void _log_open_tag(xmpp_conn_t *conn, char **attrs)$/;"	f	file:
_make_quoted	sasl.c	/^static char *_make_quoted(xmpp_ctx_t *ctx, const char *s)$/;"	f	file:
_make_sasl_auth	auth.c	/^static xmpp_stanza_t *_make_sasl_auth(xmpp_conn_t * const conn,$/;"	f	file:
_make_starttls	auth.c	/^static xmpp_stanza_t *_make_starttls(xmpp_conn_t * const conn)$/;"	f	file:
_make_string	sasl.c	/^static char *_make_string(xmpp_ctx_t *ctx, const char *s, const unsigned len)$/;"	f	file:
_malloc	ctx.c	/^static void *_malloc(const size_t size, void * const userdata)$/;"	f	file:
_parse_digest_challenge	sasl.c	/^static hash_t *_parse_digest_challenge(xmpp_ctx_t *ctx, const char *msg)$/;"	f	file:
_parser_t	parser_expat.c	/^struct _parser_t {$/;"	s	file:
_parser_t	parser_libxml2.c	/^struct _parser_t {$/;"	s	file:
_realloc	ctx.c	/^static void *_realloc(void *p, const size_t size, void * const userdata)$/;"	f	file:
_render_stanza_recursive	stanza.c	/^static int _render_stanza_recursive(xmpp_stanza_t *stanza,$/;"	f	file:
_render_update	stanza.c	/^static inline void _render_update(int *written, const int length,$/;"	f	file:
_set_attributes	parser_expat.c	/^static void _set_attributes(xmpp_stanza_t *stanza, const XML_Char **attrs)$/;"	f	file:
_set_attributes	parser_libxml2.c	/^static void _set_attributes(xmpp_stanza_t *stanza, const xmlChar **attrs)$/;"	f	file:
_snp_pow10	snprintf.c	/^static LDOUBLE _snp_pow10 (int exp)$/;"	f	file:
_snp_round	snprintf.c	/^static long _snp_round (LDOUBLE value)$/;"	f	file:
_start_element	parser_expat.c	/^static void _start_element(void *userdata,$/;"	f	file:
_start_element	parser_libxml2.c	/^static void _start_element(void *userdata, $/;"	f	file:
_timed_handler_add	handler.c	/^static void _timed_handler_add(xmpp_conn_t * const conn,$/;"	f	file:
_tls	tls_dummy.c	/^struct _tls {$/;"	s	file:
_tls	tls_gnutls.c	/^struct _tls {$/;"	s	file:
_tls	tls_openssl.c	/^struct _tls {$/;"	s	file:
_tls	tls_schannel.c	/^struct _tls {$/;"	s	file:
_xmpp_conn_t	common.h	/^struct _xmpp_conn_t {$/;"	s
_xmpp_connlist_t	common.h	/^typedef struct _xmpp_connlist_t {$/;"	s
_xmpp_ctx_t	common.h	/^struct _xmpp_ctx_t {$/;"	s
_xmpp_default_logger_levels	ctx.c	/^static const xmpp_log_level_t _xmpp_default_logger_levels[] = {XMPP_LEVEL_DEBUG,$/;"	v	file:
_xmpp_default_loggers	ctx.c	/^static const xmpp_log_t _xmpp_default_loggers[] = {$/;"	v	file:
_xmpp_handlist_t	common.h	/^struct _xmpp_handlist_t {$/;"	s
_xmpp_log_level_name	ctx.c	/^static const char * const _xmpp_log_level_name[4] = {"DEBUG", "INFO", "WARN", "ERROR"};$/;"	v	file:
_xmpp_send_queue_t	common.h	/^struct _xmpp_send_queue_t {$/;"	s
_xmpp_stanza_t	common.h	/^struct _xmpp_stanza_t {$/;"	s
aa	sock.c	/^	unsigned char aa;$/;"	m	struct:dnsquery_header	file:
abs_val	snprintf.c	/^static LDOUBLE abs_val (LDOUBLE value)$/;"	f	file:
ancount	sock.c	/^	unsigned short ancount;$/;"	m	struct:dnsquery_header	file:
arcount	sock.c	/^	unsigned short arcount;$/;"	m	struct:dnsquery_header	file:
attributes	common.h	/^    hash_t *attributes;$/;"	m	struct:_xmpp_stanza_t
auth_handle_open	auth.c	/^void auth_handle_open(xmpp_conn_t * const conn)$/;"	f
authenticated	common.h	/^    int authenticated;$/;"	m	struct:_xmpp_conn_t
base64_decode	sasl.c	/^unsigned char *base64_decode(xmpp_ctx_t *ctx,$/;"	f
base64_decoded_len	sasl.c	/^int base64_decoded_len(xmpp_ctx_t *ctx, $/;"	f
base64_encode	sasl.c	/^char *base64_encode(xmpp_ctx_t *ctx, $/;"	f
base64_encoded_len	sasl.c	/^int base64_encoded_len(xmpp_ctx_t *ctx, const unsigned len)$/;"	f
bind_required	common.h	/^    int bind_required;$/;"	m	struct:_xmpp_conn_t
bits	md5.h	/^	uint32_t bits[2];$/;"	m	struct:MD5Context
blk	sha1.c	/^#define blk(/;"	d	file:
blk0	sha1.c	/^#define blk0(/;"	d	file:
blocking_send	common.h	/^    int blocking_send;$/;"	m	struct:_xmpp_conn_t
bound_jid	common.h	/^    char *bound_jid;$/;"	m	struct:_xmpp_conn_t
buf	md5.h	/^	uint32_t buf[4];$/;"	m	struct:MD5Context
buffer	sha1.h	/^    uint8_t  buffer[64];$/;"	m	struct:__anon8
calc_domain_name_size	sock.c	/^int calc_domain_name_size(unsigned char *buf, int buflen, int offset)$/;"	f
char_to_int	snprintf.c	/^#define char_to_int(/;"	d	file:
children	common.h	/^    xmpp_stanza_t *children;$/;"	m	struct:_xmpp_stanza_t
conn	common.h	/^    xmpp_conn_t *conn;$/;"	m	struct:_xmpp_connlist_t
conn_disconnect	conn.c	/^void conn_disconnect(xmpp_conn_t * const conn) $/;"	f
conn_disconnect_clean	conn.c	/^void conn_disconnect_clean(xmpp_conn_t * const conn)$/;"	f
conn_handler	common.h	/^    xmpp_conn_handler conn_handler;$/;"	m	struct:_xmpp_conn_t
conn_handler	smarta.c	/^void conn_handler(xmpp_conn_t * const conn, const xmpp_conn_event_t status, $/;"	f
conn_open_stream	conn.c	/^void conn_open_stream(xmpp_conn_t * const conn)$/;"	f
conn_parser_reset	conn.c	/^void conn_parser_reset(xmpp_conn_t * const conn)$/;"	f
conn_prepare_reset	conn.c	/^void conn_prepare_reset(xmpp_conn_t * const conn, xmpp_open_handler handler)$/;"	f
connect_timeout	common.h	/^    unsigned int connect_timeout;$/;"	m	struct:_xmpp_conn_t
connectdomain	common.h	/^    char *connectdomain;$/;"	m	struct:_xmpp_conn_t
connectport	common.h	/^    char *connectport;$/;"	m	struct:_xmpp_conn_t
connlist	common.h	/^    xmpp_connlist_t *connlist;$/;"	m	struct:_xmpp_ctx_t
count	sha1.h	/^    uint32_t count[2];$/;"	m	struct:__anon8
cred	tls_gnutls.c	/^    gnutls_certificate_credentials_t cred;$/;"	m	struct:_tls	file:
ctx	common.h	/^    xmpp_ctx_t *ctx;$/;"	m	struct:_xmpp_conn_t
ctx	common.h	/^    xmpp_ctx_t *ctx;$/;"	m	struct:_xmpp_stanza_t
ctx	hash.c	/^    xmpp_ctx_t *ctx;$/;"	m	struct:_hash_t	file:
ctx	parser_expat.c	/^    xmpp_ctx_t *ctx;$/;"	m	struct:_parser_t	file:
ctx	parser_libxml2.c	/^    xmpp_ctx_t *ctx;$/;"	m	struct:_parser_t	file:
ctx	tls_dummy.c	/^    xmpp_ctx_t *ctx; \/* do we need this? *\/$/;"	m	struct:_tls	file:
ctx	tls_gnutls.c	/^    xmpp_ctx_t *ctx; \/* do we need this? *\/$/;"	m	struct:_tls	file:
ctx	tls_openssl.c	/^    xmpp_ctx_t *ctx;$/;"	m	struct:_tls	file:
ctx	tls_schannel.c	/^    xmpp_ctx_t *ctx;$/;"	m	struct:_tls	file:
data	common.h	/^    char *data;$/;"	m	struct:_xmpp_send_queue_t
data	common.h	/^    char *data;$/;"	m	struct:_xmpp_stanza_t
depth	parser_expat.c	/^    int depth;$/;"	m	struct:_parser_t	file:
depth	parser_libxml2.c	/^    int depth;$/;"	m	struct:_parser_t	file:
digest_to_hex	sha1.c	/^void digest_to_hex(const uint8_t digest[SHA1_DIGEST_SIZE], char *output)$/;"	f
disconnect_mem_error	util.c	/^void disconnect_mem_error(xmpp_conn_t * const conn)$/;"	f
dnsquery_header	sock.c	/^struct dnsquery_header$/;"	s	file:
dnsquery_question	sock.c	/^struct dnsquery_question$/;"	s	file:
dnsquery_resourcerecord	sock.c	/^struct dnsquery_resourcerecord$/;"	s	file:
dnsquery_srvrdata	sock.c	/^struct dnsquery_srvrdata$/;"	s	file:
domain	common.h	/^    char *domain;$/;"	m	struct:_xmpp_conn_t
dopr	snprintf.c	/^static int dopr (char *buffer, size_t maxlen, const char *format, va_list args)$/;"	f	file:
dopr_outch	snprintf.c	/^static int dopr_outch (char *buffer, size_t *currlen, size_t maxlen, char c)$/;"	f	file:
enabled	common.h	/^    int enabled; \/* handlers are added disabled and enabled after the$/;"	m	struct:_xmpp_handlist_t
endcb	parser_expat.c	/^    parser_end_callback endcb;$/;"	m	struct:_parser_t	file:
endcb	parser_libxml2.c	/^    parser_end_callback endcb;$/;"	m	struct:_parser_t	file:
entries	hash.c	/^    hashentry_t **entries;$/;"	m	struct:_hash_t	file:
entry	hash.c	/^    hashentry_t *entry;$/;"	m	struct:_hash_iterator_t	file:
error	common.h	/^    int error;$/;"	m	struct:_xmpp_conn_t
expat	parser_expat.c	/^    XML_Parser expat;$/;"	m	struct:_parser_t	file:
fmtfp	snprintf.c	/^static int fmtfp (char *buffer, size_t *currlen, size_t maxlen,$/;"	f	file:
fmtint	snprintf.c	/^static int fmtint (char *buffer, size_t *currlen, size_t maxlen,$/;"	f	file:
fmtstr	snprintf.c	/^static int fmtstr (char *buffer, size_t *currlen, size_t maxlen,$/;"	f	file:
free	hash.c	/^    hash_free_func free;$/;"	m	struct:_hash_t	file:
handler	common.h	/^    void *handler;$/;"	m	struct:_xmpp_handlist_t
handler_add	handler.c	/^void handler_add(xmpp_conn_t * const conn,$/;"	f
handler_add_id	handler.c	/^void handler_add_id(xmpp_conn_t * const conn,$/;"	f
handler_add_timed	handler.c	/^void handler_add_timed(xmpp_conn_t * const conn,$/;"	f
handler_fire_stanza	handler.c	/^void handler_fire_stanza(xmpp_conn_t * const conn,$/;"	f
handler_fire_timed	handler.c	/^uint64_t handler_fire_timed(xmpp_ctx_t * const ctx)$/;"	f
handler_reset_timed	handler.c	/^void handler_reset_timed(xmpp_conn_t *conn, int user_only)$/;"	f
handlers	common.h	/^    xmpp_handlist_t *handlers;$/;"	m	struct:_xmpp_conn_t
handlers	parser_libxml2.c	/^    xmlSAXHandler handlers;$/;"	m	struct:_parser_t	file:
hash_add	hash.c	/^int hash_add(hash_t *table, const char * const key, void *data)$/;"	f
hash_clone	hash.c	/^hash_t *hash_clone(hash_t * const table)$/;"	f
hash_drop	hash.c	/^int hash_drop(hash_t *table, const char *key)$/;"	f
hash_free_func	hash.h	/^typedef void (*hash_free_func)(const xmpp_ctx_t * const ctx, void *p);$/;"	t
hash_get	hash.c	/^void *hash_get(hash_t *table, const char *key)$/;"	f
hash_iter_new	hash.c	/^hash_iterator_t *hash_iter_new(hash_t *table)$/;"	f
hash_iter_next	hash.c	/^const char * hash_iter_next(hash_iterator_t *iter)$/;"	f
hash_iter_release	hash.c	/^void hash_iter_release(hash_iterator_t *iter)$/;"	f
hash_iterator_t	hash.h	/^typedef struct _hash_iterator_t hash_iterator_t;$/;"	t	typeref:struct:_hash_iterator_t
hash_new	hash.c	/^hash_t *hash_new(xmpp_ctx_t * const ctx, const int size,$/;"	f
hash_num_keys	hash.c	/^int hash_num_keys(hash_t *table)$/;"	f
hash_release	hash.c	/^void hash_release(hash_t * const table)$/;"	f
hash_t	hash.h	/^typedef struct _hash_t hash_t;$/;"	t	typeref:struct:_hash_t
hashentry_t	hash.c	/^typedef struct _hashentry_t hashentry_t;$/;"	t	typeref:struct:_hashentry_t	file:
hcred	tls_schannel.c	/^    CredHandle hcred;$/;"	m	struct:_tls	file:
hctxt	tls_schannel.c	/^    CtxtHandle hctxt;$/;"	m	struct:_tls	file:
hsec32	tls_schannel.c	/^    HANDLE hsec32;$/;"	m	struct:_tls	file:
id	common.h	/^	    char *id;$/;"	m	struct:_xmpp_handlist_t::__anon3::__anon5
id	sock.c	/^	unsigned short id;$/;"	m	struct:dnsquery_header	file:
id_handlers	common.h	/^    hash_t *id_handlers;$/;"	m	struct:_xmpp_conn_t
in	md5.h	/^	unsigned char in[64];$/;"	m	struct:MD5Context
index	hash.c	/^    int index;$/;"	m	struct:_hash_iterator_t	file:
init	tls_schannel.c	/^    int init;$/;"	m	struct:_tls	file:
inline	stanza.c	/^#define inline /;"	d	file:
int16_t	sasl.c	/^  typedef short int               int16_t;$/;"	t	file:
int16_t	sha1.c	/^  typedef short int               int16_t;$/;"	t	file:
int32_t	sasl.c	/^  typedef int                     int32_t;$/;"	t	file:
int32_t	sha1.c	/^  typedef int                     int32_t;$/;"	t	file:
int64_t	sasl.c	/^  typedef __int64                 int64_t;$/;"	t	file:
int64_t	sha1.c	/^  typedef __int64                 int64_t;$/;"	t	file:
int8_t	sasl.c	/^  typedef signed char             int8_t;$/;"	t	file:
int8_t	sha1.c	/^  typedef signed char             int8_t;$/;"	t	file:
jid	common.h	/^    char *jid;$/;"	m	struct:_xmpp_conn_t
key	hash.c	/^    char *key;$/;"	m	struct:_hashentry_t	file:
lang	common.h	/^    char *lang;$/;"	m	struct:_xmpp_conn_t
last_stamp	common.h	/^	    uint64_t last_stamp;$/;"	m	struct:_xmpp_handlist_t::__anon3::__anon4
lasterror	tls_openssl.c	/^    int lasterror;$/;"	m	struct:_tls	file:
lasterror	tls_schannel.c	/^    SECURITY_STATUS lasterror;$/;"	m	struct:_tls	file:
len	common.h	/^    size_t len;$/;"	m	struct:_xmpp_send_queue_t
length	hash.c	/^    int length;$/;"	m	struct:_hash_t	file:
log	common.h	/^    const xmpp_log_t *log;$/;"	m	struct:_xmpp_ctx_t
loop_status	common.h	/^    xmpp_loop_status_t loop_status;$/;"	m	struct:_xmpp_ctx_t
main	sasl.c	/^int main(int argc, char *argv[])$/;"	f
main	sha1.c	/^int main(int argc, char** argv)$/;"	f
main	smarta.c	/^int main(int argc, char **argv)$/;"	f
main	snprintf.c	/^int main (void)$/;"	f
mem	common.h	/^    const xmpp_mem_t *mem;$/;"	m	struct:_xmpp_ctx_t
message_handler	smarta.c	/^int message_handler(xmpp_conn_t * const conn, xmpp_stanza_t * const stanza, void * const userdata)$/;"	f
name	common.h	/^	    char *name;$/;"	m	struct:_xmpp_handlist_t::__anon3::__anon6
name	sock.c	/^	char name[1024];$/;"	m	struct:dnsquery_resourcerecord	file:
netbuf_add_16bitnum	sock.c	/^void netbuf_add_16bitnum(unsigned char *buf, int buflen, int *offset, unsigned short num)$/;"	f
netbuf_add_32bitnum	sock.c	/^void netbuf_add_32bitnum(unsigned char *buf, int buflen, int *offset, unsigned int num)$/;"	f
netbuf_add_dnsquery_header	sock.c	/^void netbuf_add_dnsquery_header(unsigned char *buf, int buflen, int *offset, struct dnsquery_header *header)$/;"	f
netbuf_add_dnsquery_question	sock.c	/^void netbuf_add_dnsquery_question(unsigned char *buf, int buflen, int *offset, struct dnsquery_question *question)$/;"	f
netbuf_add_domain_name	sock.c	/^void netbuf_add_domain_name(unsigned char *buf, int buflen, int *offset, $/;"	f
netbuf_get_16bitnum	sock.c	/^void netbuf_get_16bitnum(unsigned char *buf, int buflen, int *offset, unsigned short *num)$/;"	f
netbuf_get_32bitnum	sock.c	/^void netbuf_get_32bitnum(unsigned char *buf, int buflen, int *offset, unsigned int *num)$/;"	f
netbuf_get_dnsquery_header	sock.c	/^void netbuf_get_dnsquery_header(unsigned char *buf, int buflen, int *offset, struct dnsquery_header *header)$/;"	f
netbuf_get_dnsquery_question	sock.c	/^void netbuf_get_dnsquery_question(unsigned char *buf, int buflen, int *offset, struct dnsquery_question *question)$/;"	f
netbuf_get_dnsquery_resourcerecord	sock.c	/^void netbuf_get_dnsquery_resourcerecord(unsigned char *buf, int buflen, int *offset, struct dnsquery_resourcerecord *rr)$/;"	f
netbuf_get_dnsquery_srvrdata	sock.c	/^void netbuf_get_dnsquery_srvrdata(unsigned char *buf, int buflen, int *offset, struct dnsquery_srvrdata *srvrdata)$/;"	f
netbuf_get_domain_name	sock.c	/^int netbuf_get_domain_name(unsigned char *buf, int buflen, int *offset, char *namebuf, int namebuflen)$/;"	f
next	common.h	/^    struct _xmpp_connlist_t *next;$/;"	m	struct:_xmpp_connlist_t	typeref:struct:_xmpp_connlist_t::_xmpp_connlist_t
next	common.h	/^    xmpp_handlist_t *next;$/;"	m	struct:_xmpp_handlist_t
next	common.h	/^    xmpp_send_queue_t *next;$/;"	m	struct:_xmpp_send_queue_t
next	common.h	/^    xmpp_stanza_t *next;$/;"	m	struct:_xmpp_stanza_t
next	hash.c	/^    hashentry_t *next;$/;"	m	struct:_hashentry_t	file:
ns	common.h	/^	    char *ns;$/;"	m	struct:_xmpp_handlist_t::__anon3::__anon6
nscount	sock.c	/^	unsigned short nscount;$/;"	m	struct:dnsquery_header	file:
num_keys	hash.c	/^    int num_keys;$/;"	m	struct:_hash_t	file:
opcode	sock.c	/^	unsigned char opcode;$/;"	m	struct:dnsquery_header	file:
open_handler	common.h	/^    xmpp_open_handler open_handler;$/;"	m	struct:_xmpp_conn_t
parent	common.h	/^    xmpp_stanza_t *parent;$/;"	m	struct:_xmpp_stanza_t
parser	common.h	/^    parser_t *parser;$/;"	m	struct:_xmpp_conn_t
parser_end_callback	parser.h	/^typedef void (*parser_end_callback)(char *name, void * const userdata);$/;"	t
parser_feed	parser_expat.c	/^int parser_feed(parser_t *parser, char *chunk, int len)$/;"	f
parser_feed	parser_libxml2.c	/^int parser_feed(parser_t *parser, char *chunk, int len)$/;"	f
parser_free	parser_expat.c	/^void parser_free(parser_t *parser)$/;"	f
parser_free	parser_libxml2.c	/^void parser_free(parser_t *parser)$/;"	f
parser_new	parser_expat.c	/^parser_t *parser_new(xmpp_ctx_t *ctx,$/;"	f
parser_new	parser_libxml2.c	/^parser_t *parser_new(xmpp_ctx_t *ctx,$/;"	f
parser_reset	parser_expat.c	/^int parser_reset(parser_t *parser)$/;"	f
parser_reset	parser_libxml2.c	/^int parser_reset(parser_t *parser)$/;"	f
parser_stanza_callback	parser.h	/^typedef void (*parser_stanza_callback)(xmpp_stanza_t *stanza,$/;"	t
parser_start_callback	parser.h	/^typedef void (*parser_start_callback)(char *name,$/;"	t
parser_t	parser.h	/^typedef struct _parser_t parser_t;$/;"	t	typeref:struct:_parser_t
pass	common.h	/^    char *pass;$/;"	m	struct:_xmpp_conn_t
period	common.h	/^	    unsigned long period;$/;"	m	struct:_xmpp_handlist_t::__anon3::__anon4
port	sock.c	/^	unsigned short port;$/;"	m	struct:dnsquery_srvrdata	file:
prev	common.h	/^    xmpp_stanza_t *prev;$/;"	m	struct:_xmpp_stanza_t
priority	sock.c	/^	unsigned short priority;$/;"	m	struct:dnsquery_srvrdata	file:
qclass	sock.c	/^	unsigned short qclass;$/;"	m	struct:dnsquery_question	file:
qdcount	sock.c	/^	unsigned short qdcount;$/;"	m	struct:dnsquery_header	file:
qname	sock.c	/^	char qname[1024];$/;"	m	struct:dnsquery_question	file:
qr	sock.c	/^	unsigned char qr;$/;"	m	struct:dnsquery_header	file:
qtype	sock.c	/^	unsigned short qtype;$/;"	m	struct:dnsquery_question	file:
ra	sock.c	/^	unsigned char ra;$/;"	m	struct:dnsquery_header	file:
rcode	sock.c	/^	unsigned char rcode;$/;"	m	struct:dnsquery_header	file:
rd	sock.c	/^	unsigned char rd;$/;"	m	struct:dnsquery_header	file:
rdata	sock.c	/^	struct dnsquery_srvrdata rdata;$/;"	m	struct:dnsquery_resourcerecord	typeref:struct:dnsquery_resourcerecord::dnsquery_srvrdata	file:
rdlength	sock.c	/^	unsigned short rdlength;$/;"	m	struct:dnsquery_resourcerecord	file:
readybuffer	tls_schannel.c	/^    unsigned char *readybuffer;$/;"	m	struct:_tls	file:
readybufferlen	tls_schannel.c	/^    unsigned int readybufferlen;$/;"	m	struct:_tls	file:
readybufferpos	tls_schannel.c	/^    unsigned int readybufferpos;$/;"	m	struct:_tls	file:
recvbuffer	tls_schannel.c	/^    unsigned char *recvbuffer;$/;"	m	struct:_tls	file:
recvbuffermaxlen	tls_schannel.c	/^    unsigned int recvbuffermaxlen;$/;"	m	struct:_tls	file:
recvbufferpos	tls_schannel.c	/^    unsigned int recvbufferpos;$/;"	m	struct:_tls	file:
ref	common.h	/^    int ref;$/;"	m	struct:_xmpp_stanza_t
ref	common.h	/^    unsigned int ref;$/;"	m	struct:_xmpp_conn_t
ref	hash.c	/^    unsigned int ref;$/;"	m	struct:_hash_iterator_t	file:
ref	hash.c	/^    unsigned int ref;$/;"	m	struct:_hash_t	file:
reset_parser	common.h	/^    int reset_parser;$/;"	m	struct:_xmpp_conn_t
rol	sha1.c	/^#define rol(/;"	d	file:
sasl_digest_md5	sasl.c	/^char *sasl_digest_md5(xmpp_ctx_t *ctx, const char *challenge,$/;"	f
sasl_plain	sasl.c	/^char *sasl_plain(xmpp_ctx_t *ctx, const char *authid, const char *password) {$/;"	f
sasl_support	common.h	/^    int sasl_support; \/* if true, field is a bitfield of supported $/;"	m	struct:_xmpp_conn_t
secured	common.h	/^    int secured; \/* set when stream is secured with TLS *\/$/;"	m	struct:_xmpp_conn_t
send_queue_head	common.h	/^    xmpp_send_queue_t *send_queue_head;$/;"	m	struct:_xmpp_conn_t
send_queue_len	common.h	/^    int send_queue_len;$/;"	m	struct:_xmpp_conn_t
send_queue_max	common.h	/^    int send_queue_max;$/;"	m	struct:_xmpp_conn_t
send_queue_tail	common.h	/^    xmpp_send_queue_t *send_queue_tail;$/;"	m	struct:_xmpp_conn_t
sendbuffer	tls_schannel.c	/^    unsigned char *sendbuffer;$/;"	m	struct:_tls	file:
sendbufferlen	tls_schannel.c	/^    unsigned int sendbufferlen;$/;"	m	struct:_tls	file:
sendbuffermaxlen	tls_schannel.c	/^    unsigned int sendbuffermaxlen;$/;"	m	struct:_tls	file:
sendbufferpos	tls_schannel.c	/^    unsigned int sendbufferpos;$/;"	m	struct:_tls	file:
session	tls_gnutls.c	/^    gnutls_session_t session;$/;"	m	struct:_tls	file:
session_required	common.h	/^    int session_required;$/;"	m	struct:_xmpp_conn_t
sft	tls_schannel.c	/^    SecurityFunctionTable *sft;$/;"	m	struct:_tls	file:
snprintf	sock.c	/^#define snprintf /;"	d	file:
sock	common.h	/^    sock_t sock;$/;"	m	struct:_xmpp_conn_t
sock	tls_dummy.c	/^    sock_t sock;$/;"	m	struct:_tls	file:
sock	tls_gnutls.c	/^    sock_t sock;$/;"	m	struct:_tls	file:
sock	tls_openssl.c	/^    sock_t sock;$/;"	m	struct:_tls	file:
sock	tls_schannel.c	/^    sock_t sock;$/;"	m	struct:_tls	file:
sock_close	sock.c	/^int sock_close(const sock_t sock)$/;"	f
sock_connect	sock.c	/^sock_t sock_connect(const char * const host, const unsigned int port)$/;"	f
sock_connect_error	sock.c	/^int sock_connect_error(const sock_t sock)$/;"	f
sock_error	sock.c	/^int sock_error(void)$/;"	f
sock_initialize	sock.c	/^void sock_initialize(void)$/;"	f
sock_is_recoverable	sock.c	/^int sock_is_recoverable(const int error)$/;"	f
sock_read	sock.c	/^int sock_read(const sock_t sock, void * const buff, const size_t len)$/;"	f
sock_set_blocking	sock.c	/^int sock_set_blocking(const sock_t sock)$/;"	f
sock_set_nonblocking	sock.c	/^int sock_set_nonblocking(const sock_t sock)$/;"	f
sock_shutdown	sock.c	/^void sock_shutdown(void)$/;"	f
sock_t	sock.h	/^typedef SOCKET sock_t;$/;"	t
sock_t	sock.h	/^typedef int sock_t;$/;"	t
sock_write	sock.c	/^int sock_write(const sock_t sock, const void * const buff, const size_t len)$/;"	f
spcss	tls_schannel.c	/^    SecPkgContext_StreamSizes spcss;$/;"	m	struct:_tls	file:
spi	tls_schannel.c	/^    SecPkgInfo *spi;$/;"	m	struct:_tls	file:
ssl	tls_openssl.c	/^    SSL *ssl;$/;"	m	struct:_tls	file:
ssl_ctx	tls_openssl.c	/^    SSL_CTX *ssl_ctx;$/;"	m	struct:_tls	file:
stanza	parser_expat.c	/^    xmpp_stanza_t *stanza;$/;"	m	struct:_parser_t	file:
stanza	parser_libxml2.c	/^    xmpp_stanza_t *stanza;$/;"	m	struct:_parser_t	file:
stanzacb	parser_expat.c	/^    parser_stanza_callback stanzacb;$/;"	m	struct:_parser_t	file:
stanzacb	parser_libxml2.c	/^    parser_stanza_callback stanzacb;$/;"	m	struct:_parser_t	file:
startcb	parser_expat.c	/^    parser_start_callback startcb;$/;"	m	struct:_parser_t	file:
startcb	parser_libxml2.c	/^    parser_start_callback startcb;$/;"	m	struct:_parser_t	file:
state	common.h	/^    xmpp_conn_state_t state;$/;"	m	struct:_xmpp_conn_t
state	sha1.h	/^    uint32_t state[5];$/;"	m	struct:__anon8
strcasecmp	auth.c	/^#define strcasecmp /;"	d	file:
stream_error	common.h	/^    xmpp_stream_error_t *stream_error;$/;"	m	struct:_xmpp_conn_t
stream_id	common.h	/^    char *stream_id;$/;"	m	struct:_xmpp_conn_t
table	hash.c	/^    hash_t *table;$/;"	m	struct:_hash_iterator_t	file:
target	sock.c	/^	char target[1024];$/;"	m	struct:dnsquery_srvrdata	file:
tc	sock.c	/^	unsigned char tc;$/;"	m	struct:dnsquery_header	file:
test_charmap_identity	sasl.c	/^int test_charmap_identity(void)$/;"	f
test_charmap_range	sasl.c	/^int test_charmap_range(void)$/;"	f
test_data	sha1.c	/^static char *test_data[] = {$/;"	v	file:
test_results	sha1.c	/^static char *test_results[] = {$/;"	v	file:
time_elapsed	util.c	/^uint64_t time_elapsed(uint64_t t1, uint64_t t2)$/;"	f
time_stamp	util.c	/^uint64_t time_stamp(void)$/;"	f
timed_handlers	common.h	/^    xmpp_handlist_t *timed_handlers;$/;"	m	struct:_xmpp_conn_t
timeout_stamp	common.h	/^    uint64_t timeout_stamp;$/;"	m	struct:_xmpp_conn_t
tls	common.h	/^    tls_t *tls;$/;"	m	struct:_xmpp_conn_t
tls_clear_pending_write	tls_dummy.c	/^int tls_clear_pending_write(tls_t *tls)$/;"	f
tls_clear_pending_write	tls_openssl.c	/^int tls_clear_pending_write(tls_t *tls)$/;"	f
tls_clear_pending_write	tls_schannel.c	/^int tls_clear_pending_write(tls_t *tls)$/;"	f
tls_error	tls_dummy.c	/^int tls_error(tls_t *tls)$/;"	f
tls_error	tls_gnutls.c	/^int tls_error(tls_t *tls)$/;"	f
tls_error	tls_openssl.c	/^int tls_error(tls_t *tls)$/;"	f
tls_error	tls_schannel.c	/^int tls_error(tls_t *tls)$/;"	f
tls_failed	common.h	/^    int tls_failed; \/* set when tls fails, so we don't try again *\/$/;"	m	struct:_xmpp_conn_t
tls_free	tls_dummy.c	/^void tls_free(tls_t *tls)$/;"	f
tls_free	tls_gnutls.c	/^void tls_free(tls_t *tls)$/;"	f
tls_free	tls_openssl.c	/^void tls_free(tls_t *tls)$/;"	f
tls_free	tls_schannel.c	/^void tls_free(tls_t *tls)$/;"	f
tls_initialize	tls_dummy.c	/^void tls_initialize(void)$/;"	f
tls_initialize	tls_gnutls.c	/^void tls_initialize(void)$/;"	f
tls_initialize	tls_openssl.c	/^void tls_initialize(void)$/;"	f
tls_initialize	tls_schannel.c	/^void tls_initialize(void)$/;"	f
tls_is_recoverable	tls_dummy.c	/^int tls_is_recoverable(int error)$/;"	f
tls_is_recoverable	tls_openssl.c	/^int tls_is_recoverable(int error)$/;"	f
tls_is_recoverable	tls_schannel.c	/^int tls_is_recoverable(int error)$/;"	f
tls_new	tls_dummy.c	/^tls_t *tls_new(xmpp_ctx_t *ctx, sock_t sock)$/;"	f
tls_new	tls_gnutls.c	/^tls_t *tls_new(xmpp_ctx_t *ctx, sock_t sock)$/;"	f
tls_new	tls_openssl.c	/^tls_t *tls_new(xmpp_ctx_t *ctx, sock_t sock)$/;"	f
tls_new	tls_schannel.c	/^tls_t *tls_new(xmpp_ctx_t *ctx, sock_t sock)$/;"	f
tls_read	tls_dummy.c	/^int tls_read(tls_t *tls, void * const buff, const size_t len)$/;"	f
tls_read	tls_gnutls.c	/^int tls_read(tls_t *tls, void * const buff, const size_t len)$/;"	f
tls_read	tls_openssl.c	/^int tls_read(tls_t *tls, void * const buff, const size_t len)$/;"	f
tls_read	tls_schannel.c	/^int tls_read(tls_t *tls, void * const buff, const size_t len)$/;"	f
tls_set_credentials	tls_dummy.c	/^int tls_set_credentials(tls_t *tls, const char *cafilename)$/;"	f
tls_set_credentials	tls_gnutls.c	/^int tls_set_credentials(tls_t *tls, const char *cafilename)$/;"	f
tls_set_credentials	tls_openssl.c	/^int tls_set_credentials(tls_t *tls, const char *cafilename)$/;"	f
tls_set_credentials	tls_schannel.c	/^int tls_set_credentials(tls_t *tls, const char *cafilename)$/;"	f
tls_shutdown	tls_dummy.c	/^void tls_shutdown(void)$/;"	f
tls_shutdown	tls_gnutls.c	/^void tls_shutdown(void)$/;"	f
tls_shutdown	tls_openssl.c	/^void tls_shutdown(void)$/;"	f
tls_shutdown	tls_schannel.c	/^void tls_shutdown(void)$/;"	f
tls_start	tls_dummy.c	/^int tls_start(tls_t *tls)$/;"	f
tls_start	tls_gnutls.c	/^int tls_start(tls_t *tls)$/;"	f
tls_start	tls_openssl.c	/^int tls_start(tls_t *tls)$/;"	f
tls_start	tls_schannel.c	/^int tls_start(tls_t *tls)$/;"	f
tls_stop	tls_dummy.c	/^int tls_stop(tls_t *tls)$/;"	f
tls_stop	tls_gnutls.c	/^int tls_stop(tls_t *tls)$/;"	f
tls_stop	tls_openssl.c	/^int tls_stop(tls_t *tls)$/;"	f
tls_stop	tls_schannel.c	/^int tls_stop(tls_t *tls)$/;"	f
tls_support	common.h	/^    int tls_support;$/;"	m	struct:_xmpp_conn_t
tls_t	tls.h	/^typedef struct _tls tls_t;$/;"	t	typeref:struct:_tls
tls_write	tls_dummy.c	/^int tls_write(tls_t *tls, const void * const buff, const size_t len)$/;"	f
tls_write	tls_gnutls.c	/^int tls_write(tls_t *tls, const void * const buff, const size_t len)$/;"	f
tls_write	tls_openssl.c	/^int tls_write(tls_t *tls, const void * const buff, const size_t len)$/;"	f
tls_write	tls_schannel.c	/^int tls_write(tls_t *tls, const void * const buff, const size_t len)$/;"	f
ttl	sock.c	/^	unsigned int ttl;$/;"	m	struct:dnsquery_resourcerecord	file:
type	common.h	/^	    char *type;$/;"	m	struct:_xmpp_handlist_t::__anon3::__anon6
type	common.h	/^    xmpp_conn_type_t type;$/;"	m	struct:_xmpp_conn_t
type	common.h	/^    xmpp_stanza_type_t type;$/;"	m	struct:_xmpp_stanza_t
type	sock.c	/^	unsigned short type;$/;"	m	struct:dnsquery_resourcerecord	file:
uint16_t	sasl.c	/^  typedef unsigned short int        uint16_t;$/;"	t	file:
uint16_t	sha1.c	/^  typedef unsigned short int        uint16_t;$/;"	t	file:
uint32_t	md5.h	/^  typedef unsigned int              uint32_t;$/;"	t
uint32_t	sasl.c	/^  typedef unsigned int              uint32_t;$/;"	t	file:
uint32_t	sha1.c	/^  typedef unsigned int              uint32_t;$/;"	t	file:
uint64_t	util.h	/^typedef unsigned __int64 uint64_t; $/;"	t
uint8_t	sasl.c	/^  typedef unsigned char             uint8_t;$/;"	t	file:
uint8_t	sha1.c	/^  typedef unsigned char             uint8_t;$/;"	t	file:
user_handler	common.h	/^    int user_handler;$/;"	m	struct:_xmpp_handlist_t
userdata	common.h	/^    void *userdata;$/;"	m	struct:_xmpp_conn_t
userdata	common.h	/^    void *userdata;$/;"	m	struct:_xmpp_handlist_t
userdata	parser_expat.c	/^    void *userdata;$/;"	m	struct:_parser_t	file:
userdata	parser_libxml2.c	/^    void *userdata;$/;"	m	struct:_parser_t	file:
value	hash.c	/^    void *value;$/;"	m	struct:_hashentry_t	file:
version_handler	smarta.c	/^int version_handler(xmpp_conn_t * const conn, xmpp_stanza_t * const stanza, void * const userdata)$/;"	f
weight	sock.c	/^	unsigned short weight;$/;"	m	struct:dnsquery_srvrdata	file:
written	common.h	/^    size_t written;$/;"	m	struct:_xmpp_send_queue_t
xmlctx	parser_libxml2.c	/^    xmlParserCtxtPtr xmlctx;$/;"	m	struct:_parser_t	file:
xmpp_alloc	ctx.c	/^void *xmpp_alloc(const xmpp_ctx_t * const ctx, const size_t size)$/;"	f
xmpp_conn_clone	conn.c	/^xmpp_conn_t *xmpp_conn_clone(xmpp_conn_t * const conn)$/;"	f
xmpp_conn_get_bound_jid	conn.c	/^const char *xmpp_conn_get_bound_jid(const xmpp_conn_t * const conn)$/;"	f
xmpp_conn_get_context	conn.c	/^xmpp_ctx_t* xmpp_conn_get_context(xmpp_conn_t * const conn)$/;"	f
xmpp_conn_get_jid	conn.c	/^const char *xmpp_conn_get_jid(const xmpp_conn_t * const conn)$/;"	f
xmpp_conn_get_pass	conn.c	/^const char *xmpp_conn_get_pass(const xmpp_conn_t * const conn)$/;"	f
xmpp_conn_new	conn.c	/^xmpp_conn_t *xmpp_conn_new(xmpp_ctx_t * const ctx)$/;"	f
xmpp_conn_release	conn.c	/^int xmpp_conn_release(xmpp_conn_t * const conn)$/;"	f
xmpp_conn_set_jid	conn.c	/^void xmpp_conn_set_jid(xmpp_conn_t * const conn, const char * const jid)$/;"	f
xmpp_conn_set_pass	conn.c	/^void xmpp_conn_set_pass(xmpp_conn_t * const conn, const char * const pass)$/;"	f
xmpp_conn_state_t	common.h	/^} xmpp_conn_state_t;$/;"	t	typeref:enum:__anon2
xmpp_connect_client	conn.c	/^int xmpp_connect_client(xmpp_conn_t * const conn, $/;"	f
xmpp_connlist_t	common.h	/^} xmpp_connlist_t;$/;"	t	typeref:struct:_xmpp_connlist_t
xmpp_ctx_free	ctx.c	/^void xmpp_ctx_free(xmpp_ctx_t * const ctx)$/;"	f
xmpp_ctx_new	ctx.c	/^xmpp_ctx_t *xmpp_ctx_new(const xmpp_mem_t * const mem, $/;"	f
xmpp_debug	ctx.c	/^void xmpp_debug(const xmpp_ctx_t * const ctx,$/;"	f
xmpp_default_log	ctx.c	/^static xmpp_log_t xmpp_default_log = { NULL, NULL };$/;"	v	file:
xmpp_default_logger	ctx.c	/^void xmpp_default_logger(void * const userdata,$/;"	f
xmpp_default_mem	ctx.c	/^static xmpp_mem_t xmpp_default_mem = {$/;"	v	file:
xmpp_disconnect	conn.c	/^void xmpp_disconnect(xmpp_conn_t * const conn)$/;"	f
xmpp_error	ctx.c	/^void xmpp_error(const xmpp_ctx_t * const ctx,$/;"	f
xmpp_free	ctx.c	/^void xmpp_free(const xmpp_ctx_t * const ctx, void *p)$/;"	f
xmpp_get_default_logger	ctx.c	/^xmpp_log_t *xmpp_get_default_logger(xmpp_log_level_t level)$/;"	f
xmpp_handler_add	handler.c	/^void xmpp_handler_add(xmpp_conn_t * const conn,$/;"	f
xmpp_handler_delete	handler.c	/^void xmpp_handler_delete(xmpp_conn_t * const conn,$/;"	f
xmpp_handlist_t	common.h	/^typedef struct _xmpp_handlist_t xmpp_handlist_t;$/;"	t	typeref:struct:_xmpp_handlist_t
xmpp_id_handler_add	handler.c	/^void xmpp_id_handler_add(xmpp_conn_t * const conn,$/;"	f
xmpp_id_handler_delete	handler.c	/^void xmpp_id_handler_delete(xmpp_conn_t * const conn,$/;"	f
xmpp_info	ctx.c	/^void xmpp_info(const xmpp_ctx_t * const ctx,$/;"	f
xmpp_initialize	ctx.c	/^ void xmpp_initialize(void)$/;"	f
xmpp_jid_bare	jid.c	/^char *xmpp_jid_bare(xmpp_ctx_t *ctx, const char *jid)$/;"	f
xmpp_jid_domain	jid.c	/^char *xmpp_jid_domain(xmpp_ctx_t *ctx, const char *jid)$/;"	f
xmpp_jid_new	jid.c	/^char *xmpp_jid_new(xmpp_ctx_t *ctx, const char *node,$/;"	f
xmpp_jid_node	jid.c	/^char *xmpp_jid_node(xmpp_ctx_t *ctx, const char *jid)$/;"	f
xmpp_jid_resource	jid.c	/^char *xmpp_jid_resource(xmpp_ctx_t *ctx, const char *jid)$/;"	f
xmpp_log	ctx.c	/^void xmpp_log(const xmpp_ctx_t * const ctx,$/;"	f
xmpp_loop_status_t	common.h	/^} xmpp_loop_status_t;$/;"	t	typeref:enum:__anon1
xmpp_open_handler	common.h	/^typedef void (*xmpp_open_handler)(xmpp_conn_t * const conn);$/;"	t
xmpp_realloc	ctx.c	/^void *xmpp_realloc(const xmpp_ctx_t * const ctx, void *p,$/;"	f
xmpp_run	event.c	/^void xmpp_run(xmpp_ctx_t *ctx)$/;"	f
xmpp_run_once	event.c	/^void xmpp_run_once(xmpp_ctx_t *ctx, const unsigned long timeout)$/;"	f
xmpp_send	conn.c	/^void xmpp_send(xmpp_conn_t * const conn,$/;"	f
xmpp_send_queue_t	common.h	/^typedef struct _xmpp_send_queue_t xmpp_send_queue_t;$/;"	t	typeref:struct:_xmpp_send_queue_t
xmpp_send_raw	conn.c	/^void xmpp_send_raw(xmpp_conn_t * const conn,$/;"	f
xmpp_send_raw_string	conn.c	/^void xmpp_send_raw_string(xmpp_conn_t * const conn, $/;"	f
xmpp_shutdown	ctx.c	/^void xmpp_shutdown(void)$/;"	f
xmpp_snprintf	snprintf.c	/^int xmpp_snprintf (char *str,size_t count,const char *fmt,...)$/;"	f
xmpp_stanza_add_child	stanza.c	/^int xmpp_stanza_add_child(xmpp_stanza_t *stanza, xmpp_stanza_t *child)$/;"	f
xmpp_stanza_clone	stanza.c	/^xmpp_stanza_t *xmpp_stanza_clone(xmpp_stanza_t * const stanza)$/;"	f
xmpp_stanza_copy	stanza.c	/^xmpp_stanza_t *xmpp_stanza_copy(const xmpp_stanza_t * const stanza)$/;"	f
xmpp_stanza_get_attribute	stanza.c	/^char *xmpp_stanza_get_attribute(xmpp_stanza_t * const stanza,$/;"	f
xmpp_stanza_get_attribute_count	stanza.c	/^int xmpp_stanza_get_attribute_count(xmpp_stanza_t * const stanza)$/;"	f
xmpp_stanza_get_attributes	stanza.c	/^int xmpp_stanza_get_attributes(xmpp_stanza_t * const stanza,$/;"	f
xmpp_stanza_get_child_by_name	stanza.c	/^xmpp_stanza_t *xmpp_stanza_get_child_by_name(xmpp_stanza_t * const stanza, $/;"	f
xmpp_stanza_get_child_by_ns	stanza.c	/^xmpp_stanza_t *xmpp_stanza_get_child_by_ns(xmpp_stanza_t * const stanza,$/;"	f
xmpp_stanza_get_children	stanza.c	/^xmpp_stanza_t *xmpp_stanza_get_children(xmpp_stanza_t * const stanza) $/;"	f
xmpp_stanza_get_id	stanza.c	/^char *xmpp_stanza_get_id(xmpp_stanza_t * const stanza)$/;"	f
xmpp_stanza_get_name	stanza.c	/^char *xmpp_stanza_get_name(xmpp_stanza_t * const stanza)$/;"	f
xmpp_stanza_get_next	stanza.c	/^xmpp_stanza_t *xmpp_stanza_get_next(xmpp_stanza_t * const stanza)$/;"	f
xmpp_stanza_get_ns	stanza.c	/^char *xmpp_stanza_get_ns(xmpp_stanza_t * const stanza)$/;"	f
xmpp_stanza_get_text	stanza.c	/^char *xmpp_stanza_get_text(xmpp_stanza_t * const stanza)$/;"	f
xmpp_stanza_get_text_ptr	stanza.c	/^char *xmpp_stanza_get_text_ptr(xmpp_stanza_t * const stanza)$/;"	f
xmpp_stanza_get_type	stanza.c	/^char *xmpp_stanza_get_type(xmpp_stanza_t * const stanza)$/;"	f
xmpp_stanza_is_tag	stanza.c	/^int xmpp_stanza_is_tag(xmpp_stanza_t * const stanza)$/;"	f
xmpp_stanza_is_text	stanza.c	/^int xmpp_stanza_is_text(xmpp_stanza_t * const stanza)$/;"	f
xmpp_stanza_new	stanza.c	/^xmpp_stanza_t *xmpp_stanza_new(xmpp_ctx_t *ctx)$/;"	f
xmpp_stanza_release	stanza.c	/^int xmpp_stanza_release(xmpp_stanza_t * const stanza)$/;"	f
xmpp_stanza_set_attribute	stanza.c	/^int xmpp_stanza_set_attribute(xmpp_stanza_t * const stanza,$/;"	f
xmpp_stanza_set_id	stanza.c	/^int xmpp_stanza_set_id(xmpp_stanza_t * const stanza,$/;"	f
xmpp_stanza_set_name	stanza.c	/^int xmpp_stanza_set_name(xmpp_stanza_t *stanza, $/;"	f
xmpp_stanza_set_ns	stanza.c	/^int xmpp_stanza_set_ns(xmpp_stanza_t * const stanza,$/;"	f
xmpp_stanza_set_text	stanza.c	/^int xmpp_stanza_set_text(xmpp_stanza_t *stanza,$/;"	f
xmpp_stanza_set_text_with_size	stanza.c	/^int xmpp_stanza_set_text_with_size(xmpp_stanza_t *stanza,$/;"	f
xmpp_stanza_set_type	stanza.c	/^int xmpp_stanza_set_type(xmpp_stanza_t * const stanza,$/;"	f
xmpp_stanza_to_text	stanza.c	/^int  xmpp_stanza_to_text(xmpp_stanza_t *stanza,$/;"	f
xmpp_stanza_type_t	common.h	/^} xmpp_stanza_type_t;$/;"	t	typeref:enum:__anon7
xmpp_stop	event.c	/^void xmpp_stop(xmpp_ctx_t *ctx)$/;"	f
xmpp_strdup	util.c	/^char *xmpp_strdup(const xmpp_ctx_t * const ctx, const char * const s)$/;"	f
xmpp_timed_handler_add	handler.c	/^void xmpp_timed_handler_add(xmpp_conn_t * const conn,$/;"	f
xmpp_timed_handler_delete	handler.c	/^void xmpp_timed_handler_delete(xmpp_conn_t * const conn,$/;"	f
xmpp_version_check	ctx.c	/^int xmpp_version_check(int major, int minor)$/;"	f
xmpp_vsnprintf	snprintf.c	/^int xmpp_vsnprintf (char *str, size_t count, const char *fmt, va_list args)$/;"	f
xmpp_warn	ctx.c	/^void xmpp_warn(const xmpp_ctx_t * const ctx,$/;"	f
z	sock.c	/^	unsigned char z;$/;"	m	struct:dnsquery_header	file:
