!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AL_START_HEAD	src/adlist.h	/^#define AL_START_HEAD /;"	d
AL_START_TAIL	src/adlist.h	/^#define AL_START_TAIL /;"	d
BIND_TIMEOUT	src/auth.c	/^#define BIND_TIMEOUT /;"	d	file:
CONFIGLINE_MAX	src/smarta.c	/^#define CONFIGLINE_MAX /;"	d	file:
CONNECT_TIMEOUT	src/conn.c	/^#define CONNECT_TIMEOUT /;"	d	file:
Command	src/smarta.h	/^} Command;$/;"	t	typeref:struct:_Command
DEFAULT_SEND_QUEUE_MAX	src/conn.c	/^#define DEFAULT_SEND_QUEUE_MAX /;"	d	file:
DEFAULT_TIMEOUT	src/event.c	/^#define DEFAULT_TIMEOUT /;"	d	file:
DISCONNECT_TIMEOUT	src/conn.c	/^#define DISCONNECT_TIMEOUT /;"	d	file:
DP_C_LDOUBLE	src/snprintf.c	/^#define DP_C_LDOUBLE /;"	d	file:
DP_C_LONG	src/snprintf.c	/^#define DP_C_LONG /;"	d	file:
DP_C_SHORT	src/snprintf.c	/^#define DP_C_SHORT /;"	d	file:
DP_F_MINUS	src/snprintf.c	/^#define DP_F_MINUS /;"	d	file:
DP_F_NUM	src/snprintf.c	/^#define DP_F_NUM /;"	d	file:
DP_F_PLUS	src/snprintf.c	/^#define DP_F_PLUS /;"	d	file:
DP_F_SPACE	src/snprintf.c	/^#define DP_F_SPACE /;"	d	file:
DP_F_UNSIGNED	src/snprintf.c	/^#define DP_F_UNSIGNED /;"	d	file:
DP_F_UP	src/snprintf.c	/^#define DP_F_UP /;"	d	file:
DP_F_ZERO	src/snprintf.c	/^#define DP_F_ZERO /;"	d	file:
DP_S_CONV	src/snprintf.c	/^#define DP_S_CONV /;"	d	file:
DP_S_DEFAULT	src/snprintf.c	/^#define DP_S_DEFAULT /;"	d	file:
DP_S_DONE	src/snprintf.c	/^#define DP_S_DONE /;"	d	file:
DP_S_DOT	src/snprintf.c	/^#define DP_S_DOT /;"	d	file:
DP_S_FLAGS	src/snprintf.c	/^#define DP_S_FLAGS /;"	d	file:
DP_S_MAX	src/snprintf.c	/^#define DP_S_MAX /;"	d	file:
DP_S_MIN	src/snprintf.c	/^#define DP_S_MIN /;"	d	file:
DP_S_MOD	src/snprintf.c	/^#define DP_S_MOD /;"	d	file:
F1	src/md5.c	/^#define F1(/;"	d	file:
F2	src/md5.c	/^#define F2(/;"	d	file:
F3	src/md5.c	/^#define F3(/;"	d	file:
F4	src/md5.c	/^#define F4(/;"	d	file:
FEATURES_TIMEOUT	src/auth.c	/^#define FEATURES_TIMEOUT /;"	d	file:
GET_32BIT_LSB_FIRST	src/md5.c	/^#define GET_32BIT_LSB_FIRST(/;"	d	file:
HAVE_STDARGS	src/snprintf.c	/^#  undef HAVE_STDARGS$/;"	d	file:
HAVE_STDARGS	src/snprintf.c	/^# define HAVE_STDARGS /;"	d	file:
HAVE_STDARG_H	src/snprintf.c	/^#define HAVE_STDARG_H /;"	d	file:
HAVE_VARARGS_H	src/snprintf.c	/^#define HAVE_VARARGS_H$/;"	d	file:
IN_COMMADN_BLOCK	src/smarta.c	/^#define IN_COMMADN_BLOCK /;"	d	file:
IN_SERVICE_BLOCK	src/smarta.c	/^#define IN_SERVICE_BLOCK /;"	d	file:
IN_SMARTA_BLOCK	src/smarta.c	/^#define IN_SMARTA_BLOCK /;"	d	file:
LDOUBLE	src/snprintf.c	/^#define LDOUBLE /;"	d	file:
LEGACY_TIMEOUT	src/auth.c	/^#define LEGACY_TIMEOUT /;"	d	file:
LIBXMPP_VERSION_MAJOR	src/xmpp.c	/^#define LIBXMPP_VERSION_MAJOR /;"	d	file:
LIBXMPP_VERSION_MINOR	src/xmpp.c	/^#define LIBXMPP_VERSION_MINOR /;"	d	file:
LOG_DEBUG	src/xmpp.h	/^#define LOG_DEBUG /;"	d
LOG_ERROR	src/xmpp.h	/^#define LOG_ERROR /;"	d
LOG_INFO	src/xmpp.h	/^#define LOG_INFO /;"	d
LOG_WARN	src/xmpp.h	/^#define LOG_WARN /;"	d
LONG_STRING	src/snprintf.c	/^#define LONG_STRING /;"	d	file:
MAX	src/snprintf.c	/^#define MAX(/;"	d	file:
MAX_INPUT_BUFFER	src/sched.c	/^#define MAX_INPUT_BUFFER /;"	d	file:
MAX_LOGMSG_LEN	src/xmpp.h	/^#define MAX_LOGMSG_LEN /;"	d
MD5Context	src/md5.h	/^struct MD5Context {$/;"	s
MD5DumpBytes	src/md5.c	/^void MD5DumpBytes(unsigned char *b, int len) {$/;"	f
MD5Final	src/md5.c	/^void MD5Final(unsigned char digest[16], struct MD5Context *ctx) {$/;"	f
MD5Init	src/md5.c	/^void MD5Init(struct MD5Context *ctx) {$/;"	f
MD5STEP	src/md5.c	/^#define MD5STEP(/;"	d	file:
MD5Transform	src/md5.c	/^void MD5Transform(uint32_t buf[4], const unsigned char inext[64],$/;"	f
MD5Update	src/md5.c	/^void MD5Update(struct MD5Context *ctx, unsigned char const *buf, uint32_t len) {$/;"	f
MD5_H	src/md5.h	/^#define MD5_H$/;"	d
MIN	src/snprintf.c	/^#define MIN(/;"	d	file:
PUT_32BIT_LSB_FIRST	src/md5.c	/^#define PUT_32BIT_LSB_FIRST(/;"	d	file:
Parser	src/parser.h	/^} Parser;$/;"	t	typeref:struct:_Parser
R0	src/sha1.c	/^#define R0(/;"	d	file:
R1	src/sha1.c	/^#define R1(/;"	d	file:
R2	src/sha1.c	/^#define R2(/;"	d	file:
R3	src/sha1.c	/^#define R3(/;"	d	file:
R4	src/sha1.c	/^#define R4(/;"	d	file:
SASL_MASK_ANONYMOUS	src/xmpp.h	/^#define SASL_MASK_ANONYMOUS /;"	d
SASL_MASK_DIGESTMD5	src/xmpp.h	/^#define SASL_MASK_DIGESTMD5 /;"	d
SASL_MASK_PLAIN	src/xmpp.h	/^#define SASL_MASK_PLAIN /;"	d
SESSION_TIMEOUT	src/auth.c	/^#define SESSION_TIMEOUT /;"	d	file:
SHA1_CTX	src/sha1.h	/^} SHA1_CTX;$/;"	t	typeref:struct:__anon1
SHA1_DIGEST_SIZE	src/sha1.h	/^#define SHA1_DIGEST_SIZE /;"	d
SHA1_Final	src/sha1.c	/^void SHA1_Final(SHA1_CTX* context, uint8_t digest[SHA1_DIGEST_SIZE]) {$/;"	f
SHA1_Init	src/sha1.c	/^void SHA1_Init(SHA1_CTX* context) {$/;"	f
SHA1_Transform	src/sha1.c	/^void SHA1_Transform(uint32_t state[5], const uint8_t buffer[64]) {$/;"	f
SHA1_Update	src/sha1.c	/^void SHA1_Update(SHA1_CTX* context, const uint8_t* data, const size_t len)$/;"	f
SHAPrintContext	src/sha1.c	/^void SHAPrintContext(SHA1_CTX *context, char *msg){$/;"	f
Service	src/smarta.h	/^} Service;$/;"	t	typeref:struct:_Service
Smarta	src/smarta.h	/^} Smarta;$/;"	t	typeref:struct:_Smarta
VA_END	src/snprintf.c	/^#  define VA_END /;"	d	file:
VA_END	src/snprintf.c	/^# define VA_END /;"	d	file:
VA_LOCAL_DECL	src/snprintf.c	/^#  define VA_LOCAL_DECL /;"	d	file:
VA_LOCAL_DECL	src/snprintf.c	/^# define VA_LOCAL_DECL /;"	d	file:
VA_SHIFT	src/snprintf.c	/^#  define VA_SHIFT(/;"	d	file:
VA_SHIFT	src/snprintf.c	/^# define VA_SHIFT(/;"	d	file:
VA_START	src/snprintf.c	/^#  define VA_START(/;"	d	file:
VA_START	src/snprintf.c	/^# define VA_START(/;"	d	file:
XMPP_CLIENT	src/xmpp.h	/^    XMPP_CLIENT,$/;"	e	enum:__anon5
XMPP_COMPONENT	src/xmpp.h	/^    XMPP_COMPONENT$/;"	e	enum:__anon5
XMPP_CONN_CONNECT	src/xmpp.h	/^    XMPP_CONN_CONNECT,$/;"	e	enum:__anon6
XMPP_CONN_DISCONNECT	src/xmpp.h	/^    XMPP_CONN_DISCONNECT,$/;"	e	enum:__anon6
XMPP_CONN_FAIL	src/xmpp.h	/^    XMPP_CONN_FAIL$/;"	e	enum:__anon6
XMPP_EINT	src/xmpp.h	/^#define XMPP_EINT /;"	d
XMPP_EINVOP	src/xmpp.h	/^#define XMPP_EINVOP /;"	d
XMPP_EMEM	src/xmpp.h	/^#define XMPP_EMEM /;"	d
XMPP_EOK	src/xmpp.h	/^#define XMPP_EOK /;"	d
XMPP_LEVEL_DEBUG	src/xmpp.h	/^    XMPP_LEVEL_DEBUG,$/;"	e	enum:__anon4
XMPP_LEVEL_ERROR	src/xmpp.h	/^    XMPP_LEVEL_ERROR$/;"	e	enum:__anon4
XMPP_LEVEL_INFO	src/xmpp.h	/^    XMPP_LEVEL_INFO,$/;"	e	enum:__anon4
XMPP_LEVEL_WARN	src/xmpp.h	/^    XMPP_LEVEL_WARN,$/;"	e	enum:__anon4
XMPP_LOOP_NOTSTARTED	src/xmpp.h	/^    XMPP_LOOP_NOTSTARTED,$/;"	e	enum:__anon3
XMPP_LOOP_QUIT	src/xmpp.h	/^    XMPP_LOOP_QUIT$/;"	e	enum:__anon3
XMPP_LOOP_RUNNING	src/xmpp.h	/^    XMPP_LOOP_RUNNING,$/;"	e	enum:__anon3
XMPP_NS_AUTH	src/xmpp.h	/^#define XMPP_NS_AUTH /;"	d
XMPP_NS_BIND	src/xmpp.h	/^#define XMPP_NS_BIND /;"	d
XMPP_NS_CLIENT	src/xmpp.h	/^#define XMPP_NS_CLIENT /;"	d
XMPP_NS_COMPONENT	src/xmpp.h	/^#define XMPP_NS_COMPONENT /;"	d
XMPP_NS_DISCO_INFO	src/xmpp.h	/^#define XMPP_NS_DISCO_INFO /;"	d
XMPP_NS_DISCO_ITEMS	src/xmpp.h	/^#define XMPP_NS_DISCO_ITEMS /;"	d
XMPP_NS_ROSTER	src/xmpp.h	/^#define XMPP_NS_ROSTER /;"	d
XMPP_NS_SASL	src/xmpp.h	/^#define XMPP_NS_SASL /;"	d
XMPP_NS_SESSION	src/xmpp.h	/^#define XMPP_NS_SESSION /;"	d
XMPP_NS_STREAMS	src/xmpp.h	/^#define XMPP_NS_STREAMS /;"	d
XMPP_NS_STREAMS_IETF	src/xmpp.h	/^#define XMPP_NS_STREAMS_IETF /;"	d
XMPP_NS_TLS	src/xmpp.h	/^#define XMPP_NS_TLS /;"	d
XMPP_SE_BAD_FORMAT	src/xmpp.h	/^    XMPP_SE_BAD_FORMAT,$/;"	e	enum:__anon7
XMPP_SE_BAD_NS_PREFIX	src/xmpp.h	/^    XMPP_SE_BAD_NS_PREFIX,$/;"	e	enum:__anon7
XMPP_SE_CONFLICT	src/xmpp.h	/^    XMPP_SE_CONFLICT,$/;"	e	enum:__anon7
XMPP_SE_CONN_TIMEOUT	src/xmpp.h	/^    XMPP_SE_CONN_TIMEOUT,$/;"	e	enum:__anon7
XMPP_SE_HOST_GONE	src/xmpp.h	/^    XMPP_SE_HOST_GONE,$/;"	e	enum:__anon7
XMPP_SE_HOST_UNKNOWN	src/xmpp.h	/^    XMPP_SE_HOST_UNKNOWN,$/;"	e	enum:__anon7
XMPP_SE_IMPROPER_ADDR	src/xmpp.h	/^    XMPP_SE_IMPROPER_ADDR,$/;"	e	enum:__anon7
XMPP_SE_INTERNAL_SERVER_ERROR	src/xmpp.h	/^    XMPP_SE_INTERNAL_SERVER_ERROR,$/;"	e	enum:__anon7
XMPP_SE_INVALID_FROM	src/xmpp.h	/^    XMPP_SE_INVALID_FROM,$/;"	e	enum:__anon7
XMPP_SE_INVALID_ID	src/xmpp.h	/^    XMPP_SE_INVALID_ID,$/;"	e	enum:__anon7
XMPP_SE_INVALID_NS	src/xmpp.h	/^    XMPP_SE_INVALID_NS,$/;"	e	enum:__anon7
XMPP_SE_INVALID_XML	src/xmpp.h	/^    XMPP_SE_INVALID_XML,$/;"	e	enum:__anon7
XMPP_SE_NOT_AUTHORIZED	src/xmpp.h	/^    XMPP_SE_NOT_AUTHORIZED,$/;"	e	enum:__anon7
XMPP_SE_POLICY_VIOLATION	src/xmpp.h	/^    XMPP_SE_POLICY_VIOLATION,$/;"	e	enum:__anon7
XMPP_SE_REMOTE_CONN_FAILED	src/xmpp.h	/^    XMPP_SE_REMOTE_CONN_FAILED,$/;"	e	enum:__anon7
XMPP_SE_RESOURCE_CONSTRAINT	src/xmpp.h	/^    XMPP_SE_RESOURCE_CONSTRAINT,$/;"	e	enum:__anon7
XMPP_SE_RESTRICTED_XML	src/xmpp.h	/^    XMPP_SE_RESTRICTED_XML,$/;"	e	enum:__anon7
XMPP_SE_SEE_OTHER_HOST	src/xmpp.h	/^    XMPP_SE_SEE_OTHER_HOST,$/;"	e	enum:__anon7
XMPP_SE_SYSTEM_SHUTDOWN	src/xmpp.h	/^    XMPP_SE_SYSTEM_SHUTDOWN,$/;"	e	enum:__anon7
XMPP_SE_UNDEFINED_CONDITION	src/xmpp.h	/^    XMPP_SE_UNDEFINED_CONDITION,$/;"	e	enum:__anon7
XMPP_SE_UNSUPPORTED_ENCODING	src/xmpp.h	/^    XMPP_SE_UNSUPPORTED_ENCODING,$/;"	e	enum:__anon7
XMPP_SE_UNSUPPORTED_STANZA_TYPE	src/xmpp.h	/^    XMPP_SE_UNSUPPORTED_STANZA_TYPE,$/;"	e	enum:__anon7
XMPP_SE_UNSUPPORTED_VERSION	src/xmpp.h	/^    XMPP_SE_UNSUPPORTED_VERSION,$/;"	e	enum:__anon7
XMPP_SE_XML_NOT_WELL_FORMED	src/xmpp.h	/^    XMPP_SE_XML_NOT_WELL_FORMED$/;"	e	enum:__anon7
XMPP_STANZA_TAG	src/stanza.h	/^    XMPP_STANZA_TAG$/;"	e	enum:__anon2
XMPP_STANZA_TEXT	src/stanza.h	/^    XMPP_STANZA_TEXT,$/;"	e	enum:__anon2
XMPP_STANZA_UNKNOWN	src/stanza.h	/^    XMPP_STANZA_UNKNOWN,$/;"	e	enum:__anon2
XMPP_STATE_CONNECTED	src/xmpp.h	/^    XMPP_STATE_CONNECTED$/;"	e	enum:__anon8
XMPP_STATE_CONNECTING	src/xmpp.h	/^    XMPP_STATE_CONNECTING,$/;"	e	enum:__anon8
XMPP_STATE_DISCONNECTED	src/xmpp.h	/^    XMPP_STATE_DISCONNECTED,$/;"	e	enum:__anon8
XMPP_UNKNOWN	src/xmpp.h	/^    XMPP_UNKNOWN,$/;"	e	enum:__anon5
XmppConn	src/xmpp.h	/^typedef struct _XmppConn XmppConn;$/;"	t	typeref:struct:_XmppConn
XmppStanza	src/stanza.h	/^typedef struct _XmppStanza XmppStanza;$/;"	t	typeref:struct:_XmppStanza
XmppStanzaType	src/stanza.h	/^} XmppStanzaType;$/;"	t	typeref:enum:__anon2
XmppStanzao_text	src/stanza.c	/^int  XmppStanzao_text(XmppStanza *stanza,$/;"	f
_BSD_SOURCE	src/fmacros.h	/^#define _BSD_SOURCE$/;"	d
_Command	src/smarta.h	/^typedef struct _Command {$/;"	s
_POSIX_C_SOURCE	src/fmacros.h	/^#define _POSIX_C_SOURCE /;"	d
_Parser	src/parser.h	/^typedef struct _Parser {$/;"	s
_SMARTA_HASH_H_	src/hash.h	/^#define _SMARTA_HASH_H_$/;"	d
_SMARTA_H_	src/smarta.h	/^#define _SMARTA_H_$/;"	d
_SMARTA_PARSER_H_	src/parser.h	/^#define _SMARTA_PARSER_H_$/;"	d
_SMARTA_SASL_H__	src/sasl.h	/^#define _SMARTA_SASL_H__$/;"	d
_SMARTA_STANZA_H_	src/stanza.h	/^#define _SMARTA_STANZA_H_$/;"	d
_SMARTA_XMPP_H__	src/xmpp.h	/^#define _SMARTA_XMPP_H__$/;"	d
_Service	src/smarta.h	/^typedef struct _Service {$/;"	s
_Smarta	src/smarta.h	/^typedef struct _Smarta {$/;"	s
_XOPEN_SOURCE	src/fmacros.h	/^#define _XOPEN_SOURCE /;"	d
_XOPEN_SOURCE	src/fmacros.h	/^#define _XOPEN_SOURCE$/;"	d
_XmppConn	src/xmpp.h	/^struct _XmppConn {$/;"	s
_XmppStanza	src/stanza.h	/^struct _XmppStanza {$/;"	s
__ADLIST_H__	src/adlist.h	/^#define __ADLIST_H__$/;"	d
__HIREDIS_FMACRO_H	src/fmacros.h	/^#define __HIREDIS_FMACRO_H$/;"	d
__SDS_H	src/sds.h	/^#define __SDS_H$/;"	d
__SHA1_H	src/sha1.h	/^#define __SHA1_H$/;"	d
__SMARTA_SCHED_H__	src/sched.h	/^#define __SMARTA_SCHED_H__$/;"	d
__SMARTA_SOCK_H__	src/sock.h	/^#define __SMARTA_SOCK_H__$/;"	d
__SMARTA_TLS_H__	src/tls.h	/^#define __SMARTA_TLS_H__$/;"	d
__SMARTA_UTIL_H__	src/util.h	/^#define __SMARTA_UTIL_H__$/;"	d
__failed_tests	src/sds.c	/^int __failed_tests = 0;$/;"	v
__test_num	src/sds.c	/^int __test_num = 0;$/;"	v
_add_key	src/sasl.c	/^static char *_add_key(hash_t *table, const char *key, $/;"	f	file:
_auth	src/auth.c	/^static void _auth(XmppConn * const conn)$/;"	f	file:
_base64_charmap	src/sasl.c	/^static const char _base64_charmap[65] = {$/;"	v	file:
_base64_invcharmap	src/sasl.c	/^static const char _base64_invcharmap[256] = {$/;"	v	file:
_characters	src/parser.c	/^static void _characters(void *userdata, const XML_Char *s, int len)$/;"	f	file:
_class	src/sock.c	/^	unsigned short _class;$/;"	m	struct:dnsquery_resourcerecord	file:
_digest_to_hex	src/sasl.c	/^static void _digest_to_hex(const char *digest, char *hex) {$/;"	f	file:
_disconnect_cleanup	src/conn.c	/^static int _disconnect_cleanup(XmppConn * const conn, $/;"	f	file:
_end_element	src/parser.c	/^static void _end_element(void *userdata, const XML_Char *name)$/;"	f	file:
_get_authid	src/auth.c	/^static char *_get_authid(XmppConn * const conn)$/;"	f	file:
_get_stream_attribute	src/conn.c	/^static char *_get_stream_attribute(char **attrs, char *name)$/;"	f	file:
_handle_bind	src/auth.c	/^static int _handle_bind(XmppConn * const conn,$/;"	f	file:
_handle_digestmd5_challenge	src/auth.c	/^static int _handle_digestmd5_challenge(XmppConn * const conn,$/;"	f	file:
_handle_digestmd5_rspauth	src/auth.c	/^static int _handle_digestmd5_rspauth(XmppConn * const conn,$/;"	f	file:
_handle_error	src/auth.c	/^static int _handle_error(XmppConn * const conn,$/;"	f	file:
_handle_features	src/auth.c	/^static int _handle_features(XmppConn * const conn,$/;"	f	file:
_handle_features_sasl	src/auth.c	/^static int _handle_features_sasl(XmppConn * const conn,$/;"	f	file:
_handle_legacy	src/auth.c	/^static int _handle_legacy(XmppConn * const conn,$/;"	f	file:
_handle_missing_bind	src/auth.c	/^static int _handle_missing_bind(XmppConn * const conn,$/;"	f	file:
_handle_missing_features	src/auth.c	/^static int _handle_missing_features(XmppConn * const conn,$/;"	f	file:
_handle_missing_features_sasl	src/auth.c	/^static int _handle_missing_features_sasl(XmppConn * const conn,$/;"	f	file:
_handle_missing_legacy	src/auth.c	/^static int _handle_missing_legacy(XmppConn * const conn,$/;"	f	file:
_handle_missing_session	src/auth.c	/^static int _handle_missing_session(XmppConn * const conn,$/;"	f	file:
_handle_open_sasl	src/auth.c	/^static void _handle_open_sasl(XmppConn * const conn)$/;"	f	file:
_handle_proceedtls_default	src/auth.c	/^static int _handle_proceedtls_default(XmppConn * const conn,$/;"	f	file:
_handle_sasl_result	src/auth.c	/^static int _handle_sasl_result(XmppConn * const conn,$/;"	f	file:
_handle_session	src/auth.c	/^static int _handle_session(XmppConn * const conn,$/;"	f	file:
_handle_stream_end	src/conn.c	/^static void _handle_stream_end(char *name,$/;"	f	file:
_handle_stream_stanza	src/conn.c	/^static void _handle_stream_stanza(XmppStanza *stanza,$/;"	f	file:
_handle_stream_start	src/conn.c	/^static void _handle_stream_start(char *name, char **attrs, $/;"	f	file:
_handler_add	src/handler.c	/^static void _handler_add(XmppConn * const conn,$/;"	f	file:
_hash_iterator_t	src/hash.c	/^struct _hash_iterator_t {$/;"	s	file:
_hash_key	src/hash.c	/^static int _hash_key(hash_t *table, const char *key)$/;"	f	file:
_hash_t	src/hash.c	/^struct _hash_t {$/;"	s	file:
_hashentry_t	src/hash.c	/^struct _hashentry_t {$/;"	s	file:
_id_handler_add	src/handler.c	/^static void _id_handler_add(XmppConn * const conn,$/;"	f	file:
_in_progress	src/sock.c	/^static int _in_progress(int error)$/;"	f	file:
_log_open_tag	src/conn.c	/^static void _log_open_tag(XmppConn *conn, char **attrs)$/;"	f	file:
_make_quoted	src/sasl.c	/^static char *_make_quoted(const char *s) {$/;"	f	file:
_make_sasl_auth	src/auth.c	/^static XmppStanza *_make_sasl_auth(XmppConn * const conn,$/;"	f	file:
_make_starttls	src/auth.c	/^static XmppStanza *_make_starttls(XmppConn * const conn)$/;"	f	file:
_make_string	src/sasl.c	/^static char *_make_string(const char *s, const unsigned len) {$/;"	f	file:
_parse_digest_challenge	src/sasl.c	/^static hash_t *_parse_digest_challenge(const char *msg)$/;"	f	file:
_render_stanza_recursive	src/stanza.c	/^static int _render_stanza_recursive(XmppStanza *stanza,$/;"	f	file:
_render_update	src/stanza.c	/^static inline void _render_update(int *written, const int length,$/;"	f	file:
_set_attributes	src/parser.c	/^static void _set_attributes(XmppStanza *stanza, const XML_Char **attrs)$/;"	f	file:
_snp_pow10	src/snprintf.c	/^static LDOUBLE _snp_pow10 (int exp)$/;"	f	file:
_snp_round	src/snprintf.c	/^static long _snp_round (LDOUBLE value)$/;"	f	file:
_start_element	src/parser.c	/^static void _start_element(void *userdata,$/;"	f	file:
_timed_handler_add	src/handler.c	/^static void _timed_handler_add(XmppConn * const conn,$/;"	f	file:
_tls	src/tls_dummy.c	/^struct _tls {$/;"	s	file:
_tls	src/tls_gnutls.c	/^struct _tls {$/;"	s	file:
_tls	src/tls_openssl.c	/^struct _tls {$/;"	s	file:
_xmpp_handlist_t	src/xmpp.h	/^struct _xmpp_handlist_t {$/;"	s
_xmpp_log_t	src/xmpp.h	/^struct _xmpp_log_t {$/;"	s
_xmpp_send_queue_t	src/xmpp.h	/^struct _xmpp_send_queue_t {$/;"	s
_xmpp_stream_error_t	src/xmpp.h	/^struct _xmpp_stream_error_t {$/;"	s
aa	src/sock.c	/^	unsigned char aa;$/;"	m	struct:dnsquery_header	file:
abs_val	src/snprintf.c	/^static LDOUBLE abs_val (LDOUBLE value)$/;"	f	file:
ancount	src/sock.c	/^	unsigned short ancount;$/;"	m	struct:dnsquery_header	file:
apikey	src/smarta.h	/^    char *apikey;$/;"	m	struct:_Smarta
arcount	src/sock.c	/^	unsigned short arcount;$/;"	m	struct:dnsquery_header	file:
attributes	src/stanza.h	/^    hash_t *attributes;$/;"	m	struct:_XmppStanza
auth_handle_open	src/auth.c	/^void auth_handle_open(XmppConn * const conn)$/;"	f
authenticated	src/xmpp.h	/^    int authenticated;$/;"	m	struct:_XmppConn
base64_decode	src/sasl.c	/^unsigned char *base64_decode(const char * const buffer, const unsigned len) {$/;"	f
base64_decoded_len	src/sasl.c	/^int base64_decoded_len(const char * const buffer, const unsigned len) {$/;"	f
base64_encode	src/sasl.c	/^char *base64_encode(const unsigned char * const buffer, const unsigned len) {$/;"	f
base64_encoded_len	src/sasl.c	/^int base64_encoded_len(const unsigned len) {$/;"	f
bind_required	src/xmpp.h	/^    int bind_required;$/;"	m	struct:_XmppConn
bits	src/md5.h	/^	uint32_t bits[2];$/;"	m	struct:MD5Context
blk	src/sha1.c	/^#define blk(/;"	d	file:
blk0	src/sha1.c	/^#define blk0(/;"	d	file:
blocking_send	src/xmpp.h	/^    int blocking_send;$/;"	m	struct:_XmppConn
bound_jid	src/xmpp.h	/^    char *bound_jid;$/;"	m	struct:_XmppConn
buf	src/md5.h	/^	uint32_t buf[4];$/;"	m	struct:MD5Context
buf	src/sds.h	/^    char buf[];$/;"	m	struct:sdshdr
buffer	src/sha1.h	/^    uint8_t  buffer[64];$/;"	m	struct:__anon1
calc_domain_name_size	src/sock.c	/^int calc_domain_name_size(unsigned char *buf, int buflen, int offset)$/;"	f
char_to_int	src/snprintf.c	/^#define char_to_int(/;"	d	file:
check_service	src/sched.c	/^int check_service(XmppConn *conn, void *userdata) {$/;"	f
children	src/stanza.h	/^    XmppStanza *children;$/;"	m	struct:_XmppStanza
command	src/smarta.h	/^    char *command;$/;"	m	struct:_Service
conn_disconnect	src/conn.c	/^void conn_disconnect(XmppConn * const conn) $/;"	f
conn_disconnect_clean	src/conn.c	/^void conn_disconnect_clean(XmppConn * const conn)$/;"	f
conn_handler	src/smarta.c	/^void conn_handler(XmppConn * const conn, const xmpp_conn_event_t status, $/;"	f
conn_handler	src/xmpp.h	/^    xmpp_conn_handler conn_handler;$/;"	m	struct:_XmppConn
conn_open_stream	src/conn.c	/^void conn_open_stream(XmppConn * const conn)$/;"	f
conn_parser_reset	src/conn.c	/^void conn_parser_reset(XmppConn * const conn)$/;"	f
conn_prepare_reset	src/conn.c	/^void conn_prepare_reset(XmppConn * const conn, xmpp_open_handler handler)$/;"	f
connect_timeout	src/xmpp.h	/^    unsigned int connect_timeout;$/;"	m	struct:_XmppConn
connectdomain	src/xmpp.h	/^    char *connectdomain;$/;"	m	struct:_XmppConn
connectport	src/xmpp.h	/^    char *connectport;$/;"	m	struct:_XmppConn
count	src/sha1.h	/^    uint32_t count[2];$/;"	m	struct:__anon1
cred	src/tls_gnutls.c	/^    gnutls_certificate_credentials_t cred;$/;"	m	struct:_tls	file:
daemonize	src/smarta.h	/^    int daemonize;$/;"	m	struct:_Smarta
data	src/stanza.h	/^    char *data;$/;"	m	struct:_XmppStanza
data	src/xmpp.h	/^    char *data;$/;"	m	struct:_xmpp_send_queue_t
depth	src/parser.h	/^    int depth;$/;"	m	struct:_Parser
digest_to_hex	src/sha1.c	/^void digest_to_hex(const uint8_t digest[SHA1_DIGEST_SIZE], char *output) {$/;"	f
direction	src/adlist.h	/^    int direction;$/;"	m	struct:listIter
disconnect_mem_error	src/util.c	/^void disconnect_mem_error(XmppConn * const conn) {$/;"	f
dnsquery_header	src/sock.c	/^struct dnsquery_header$/;"	s	file:
dnsquery_question	src/sock.c	/^struct dnsquery_question$/;"	s	file:
dnsquery_resourcerecord	src/sock.c	/^struct dnsquery_resourcerecord$/;"	s	file:
dnsquery_srvrdata	src/sock.c	/^struct dnsquery_srvrdata$/;"	s	file:
domain	src/xmpp.h	/^    char *domain;$/;"	m	struct:_XmppConn
dopr	src/snprintf.c	/^static int dopr (char *buffer, size_t maxlen, const char *format, va_list args)$/;"	f	file:
dopr_outch	src/snprintf.c	/^static int dopr_outch (char *buffer, size_t *currlen, size_t maxlen, char c)$/;"	f	file:
dup	src/adlist.h	/^    void *(*dup)(void *ptr);$/;"	m	struct:list
enabled	src/xmpp.h	/^    int enabled; \/* handlers are added disabled and enabled after the$/;"	m	struct:_xmpp_handlist_t
endcb	src/parser.h	/^    parser_end_callback endcb;$/;"	m	struct:_Parser
entries	src/hash.c	/^    hashentry_t **entries;$/;"	m	struct:_hash_t	file:
entry	src/hash.c	/^    hashentry_t *entry;$/;"	m	struct:_hash_iterator_t	file:
error	src/xmpp.h	/^    int error;$/;"	m	struct:_XmppConn
expat	src/parser.h	/^    XML_Parser expat;$/;"	m	struct:_Parser
fmtfp	src/snprintf.c	/^static int fmtfp (char *buffer, size_t *currlen, size_t maxlen,$/;"	f	file:
fmtint	src/snprintf.c	/^static int fmtint (char *buffer, size_t *currlen, size_t maxlen,$/;"	f	file:
fmtstr	src/snprintf.c	/^static int fmtstr (char *buffer, size_t *currlen, size_t maxlen,$/;"	f	file:
free	src/adlist.h	/^    void (*free)(void *ptr);$/;"	m	struct:list
free	src/hash.c	/^    hash_free_func free;$/;"	m	struct:_hash_t	file:
free	src/sds.h	/^    int free;$/;"	m	struct:sdshdr
handler	src/xmpp.h	/^    void *handler;$/;"	m	struct:_xmpp_handlist_t
handler	src/xmpp.h	/^    xmpp_log_handler handler;$/;"	m	struct:_xmpp_log_t
handler_add	src/handler.c	/^void handler_add(XmppConn * const conn,$/;"	f
handler_add_id	src/handler.c	/^void handler_add_id(XmppConn * const conn,$/;"	f
handler_add_timed	src/handler.c	/^void handler_add_timed(XmppConn * const conn,$/;"	f
handler_fire_stanza	src/handler.c	/^void handler_fire_stanza(XmppConn * const conn,$/;"	f
handler_fire_timed	src/handler.c	/^uint64_t handler_fire_timed(XmppConn *conn) {$/;"	f
handler_reset_timed	src/handler.c	/^void handler_reset_timed(XmppConn *conn, int user_only) {$/;"	f
handlers	src/xmpp.h	/^    xmpp_handlist_t *handlers;$/;"	m	struct:_XmppConn
hash_add	src/hash.c	/^int hash_add(hash_t *table, const char * const key, void *data)$/;"	f
hash_clone	src/hash.c	/^hash_t *hash_clone(hash_t * const table)$/;"	f
hash_drop	src/hash.c	/^int hash_drop(hash_t *table, const char *key)$/;"	f
hash_free_func	src/hash.h	/^typedef void (*hash_free_func)(void *p);$/;"	t
hash_get	src/hash.c	/^void *hash_get(hash_t *table, const char *key)$/;"	f
hash_iter_new	src/hash.c	/^hash_iterator_t *hash_iter_new(hash_t *table)$/;"	f
hash_iter_next	src/hash.c	/^const char * hash_iter_next(hash_iterator_t *iter)$/;"	f
hash_iter_release	src/hash.c	/^void hash_iter_release(hash_iterator_t *iter)$/;"	f
hash_iterator_t	src/hash.h	/^typedef struct _hash_iterator_t hash_iterator_t;$/;"	t	typeref:struct:_hash_iterator_t
hash_new	src/hash.c	/^hash_t *hash_new(const int size, hash_free_func free)$/;"	f
hash_num_keys	src/hash.c	/^int hash_num_keys(hash_t *table)$/;"	f
hash_release	src/hash.c	/^void hash_release(hash_t * const table)$/;"	f
hash_t	src/hash.h	/^typedef struct _hash_t hash_t;$/;"	t	typeref:struct:_hash_t
hashentry_t	src/hash.c	/^typedef struct _hashentry_t hashentry_t;$/;"	t	typeref:struct:_hashentry_t	file:
head	src/adlist.h	/^    listNode *head;$/;"	m	struct:list
id	src/sock.c	/^	unsigned short id;$/;"	m	struct:dnsquery_header	file:
id	src/xmpp.h	/^	    char *id;$/;"	m	struct:_xmpp_handlist_t::__anon9::__anon11
id_handlers	src/xmpp.h	/^    hash_t *id_handlers;$/;"	m	struct:_XmppConn
in	src/md5.h	/^	unsigned char in[64];$/;"	m	struct:MD5Context
index	src/hash.c	/^    int index;$/;"	m	struct:_hash_iterator_t	file:
init_config	src/smarta.c	/^void init_config() {$/;"	f
int16_t	src/sasl.c	/^  typedef short int               int16_t;$/;"	t	file:
int16_t	src/sha1.c	/^  typedef short int               int16_t;$/;"	t	file:
int32_t	src/sasl.c	/^  typedef int                     int32_t;$/;"	t	file:
int32_t	src/sha1.c	/^  typedef int                     int32_t;$/;"	t	file:
int64_t	src/sasl.c	/^  typedef __int64                 int64_t;$/;"	t	file:
int64_t	src/sha1.c	/^  typedef __int64                 int64_t;$/;"	t	file:
int8_t	src/sasl.c	/^  typedef signed char             int8_t;$/;"	t	file:
int8_t	src/sha1.c	/^  typedef signed char             int8_t;$/;"	t	file:
isslave	src/smarta.h	/^    int isslave;$/;"	m	struct:_Smarta
jid	src/xmpp.h	/^    char *jid;$/;"	m	struct:_XmppConn
key	src/hash.c	/^    char *key;$/;"	m	struct:_hashentry_t	file:
lang	src/xmpp.h	/^    char *lang;$/;"	m	struct:_XmppConn
last_stamp	src/xmpp.h	/^	    uint64_t last_stamp;$/;"	m	struct:_xmpp_handlist_t::__anon9::__anon10
lasterror	src/tls_openssl.c	/^    int lasterror;$/;"	m	struct:_tls	file:
len	src/adlist.h	/^    unsigned int len;$/;"	m	struct:list
len	src/sds.h	/^    int len;$/;"	m	struct:sdshdr
len	src/xmpp.h	/^    size_t len;$/;"	m	struct:_xmpp_send_queue_t
length	src/hash.c	/^    int length;$/;"	m	struct:_hash_t	file:
list	src/adlist.h	/^typedef struct list {$/;"	s
list	src/adlist.h	/^} list;$/;"	t	typeref:struct:list
listAddNodeHead	src/adlist.c	/^list *listAddNodeHead(list *list, void *value)$/;"	f
listAddNodeTail	src/adlist.c	/^list *listAddNodeTail(list *list, void *value)$/;"	f
listCreate	src/adlist.c	/^list *listCreate(void)$/;"	f
listDelNode	src/adlist.c	/^void listDelNode(list *list, listNode *node)$/;"	f
listDup	src/adlist.c	/^list *listDup(list *orig)$/;"	f
listFirst	src/adlist.h	/^#define listFirst(/;"	d
listGetDupMethod	src/adlist.h	/^#define listGetDupMethod(/;"	d
listGetFree	src/adlist.h	/^#define listGetFree(/;"	d
listGetIterator	src/adlist.c	/^listIter *listGetIterator(list *list, int direction)$/;"	f
listGetMatchMethod	src/adlist.h	/^#define listGetMatchMethod(/;"	d
listIndex	src/adlist.c	/^listNode *listIndex(list *list, int index) {$/;"	f
listInsertNode	src/adlist.c	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after) {$/;"	f
listIter	src/adlist.h	/^typedef struct listIter {$/;"	s
listIter	src/adlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listLast	src/adlist.h	/^#define listLast(/;"	d
listLength	src/adlist.h	/^#define listLength(/;"	d
listNext	src/adlist.c	/^listNode *listNext(listIter *iter)$/;"	f
listNextNode	src/adlist.h	/^#define listNextNode(/;"	d
listNode	src/adlist.h	/^typedef struct listNode {$/;"	s
listNode	src/adlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNodeValue	src/adlist.h	/^#define listNodeValue(/;"	d
listPrevNode	src/adlist.h	/^#define listPrevNode(/;"	d
listRelease	src/adlist.c	/^void listRelease(list *list)$/;"	f
listReleaseIterator	src/adlist.c	/^void listReleaseIterator(listIter *iter) {$/;"	f
listRewind	src/adlist.c	/^void listRewind(list *list, listIter *li) {$/;"	f
listRewindTail	src/adlist.c	/^void listRewindTail(list *list, listIter *li) {$/;"	f
listSearchKey	src/adlist.c	/^listNode *listSearchKey(list *list, void *key)$/;"	f
listSetDupMethod	src/adlist.h	/^#define listSetDupMethod(/;"	d
listSetFreeMethod	src/adlist.h	/^#define listSetFreeMethod(/;"	d
listSetMatchMethod	src/adlist.h	/^#define listSetMatchMethod(/;"	d
load_config	src/smarta.c	/^void load_config(char *filename) {$/;"	f
logfile	src/smarta.h	/^    char *logfile;$/;"	m	struct:_Smarta
loop_status	src/xmpp.h	/^    int loop_status;$/;"	m	struct:_XmppConn
main	src/sds.c	/^int main(void) {$/;"	f
main	src/sha1.c	/^int main(int argc, char** argv) {$/;"	f
main	src/smarta.c	/^int main(int argc, char **argv) {$/;"	f
main	src/snprintf.c	/^int main (void)$/;"	f
masterauth	src/smarta.h	/^    char *masterauth;$/;"	m	struct:_Smarta
masterhost	src/smarta.h	/^    char *masterhost;$/;"	m	struct:_Smarta
masterport	src/smarta.h	/^    int masterport;$/;"	m	struct:_Smarta
match	src/adlist.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list
message_handler	src/smarta.c	/^int message_handler(XmppConn * const conn, XmppStanza * const stanza, void * const userdata)$/;"	f
name	src/smarta.h	/^    char *name;$/;"	m	struct:_Command
name	src/smarta.h	/^    char *name;$/;"	m	struct:_Service
name	src/smarta.h	/^    char *name;$/;"	m	struct:_Smarta
name	src/sock.c	/^	char name[1024];$/;"	m	struct:dnsquery_resourcerecord	file:
name	src/xmpp.h	/^	    char *name;$/;"	m	struct:_xmpp_handlist_t::__anon9::__anon12
netbuf_add_16bitnum	src/sock.c	/^void netbuf_add_16bitnum(unsigned char *buf, int buflen, int *offset, unsigned short num)$/;"	f
netbuf_add_32bitnum	src/sock.c	/^void netbuf_add_32bitnum(unsigned char *buf, int buflen, int *offset, unsigned int num)$/;"	f
netbuf_add_dnsquery_header	src/sock.c	/^void netbuf_add_dnsquery_header(unsigned char *buf, int buflen, int *offset, struct dnsquery_header *header)$/;"	f
netbuf_add_dnsquery_question	src/sock.c	/^void netbuf_add_dnsquery_question(unsigned char *buf, int buflen, int *offset, struct dnsquery_question *question)$/;"	f
netbuf_add_domain_name	src/sock.c	/^void netbuf_add_domain_name(unsigned char *buf, int buflen, int *offset, $/;"	f
netbuf_get_16bitnum	src/sock.c	/^void netbuf_get_16bitnum(unsigned char *buf, int buflen, int *offset, unsigned short *num)$/;"	f
netbuf_get_32bitnum	src/sock.c	/^void netbuf_get_32bitnum(unsigned char *buf, int buflen, int *offset, unsigned int *num)$/;"	f
netbuf_get_dnsquery_header	src/sock.c	/^void netbuf_get_dnsquery_header(unsigned char *buf, int buflen, int *offset, struct dnsquery_header *header)$/;"	f
netbuf_get_dnsquery_question	src/sock.c	/^void netbuf_get_dnsquery_question(unsigned char *buf, int buflen, int *offset, struct dnsquery_question *question)$/;"	f
netbuf_get_dnsquery_resourcerecord	src/sock.c	/^void netbuf_get_dnsquery_resourcerecord(unsigned char *buf, int buflen, int *offset, struct dnsquery_resourcerecord *rr)$/;"	f
netbuf_get_dnsquery_srvrdata	src/sock.c	/^void netbuf_get_dnsquery_srvrdata(unsigned char *buf, int buflen, int *offset, struct dnsquery_srvrdata *srvrdata)$/;"	f
netbuf_get_domain_name	src/sock.c	/^int netbuf_get_domain_name(unsigned char *buf, int buflen, int *offset, char *namebuf, int namebuflen)$/;"	f
next	src/adlist.h	/^    listNode *next;$/;"	m	struct:listIter
next	src/adlist.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
next	src/hash.c	/^    hashentry_t *next;$/;"	m	struct:_hashentry_t	file:
next	src/stanza.h	/^    XmppStanza *next;$/;"	m	struct:_XmppStanza
next	src/xmpp.h	/^    xmpp_handlist_t *next;$/;"	m	struct:_xmpp_handlist_t
next	src/xmpp.h	/^    xmpp_send_queue_t *next;$/;"	m	struct:_xmpp_send_queue_t
ns	src/xmpp.h	/^	    char *ns;$/;"	m	struct:_xmpp_handlist_t::__anon9::__anon12
nscount	src/sock.c	/^	unsigned short nscount;$/;"	m	struct:dnsquery_header	file:
num_keys	src/hash.c	/^    int num_keys;$/;"	m	struct:_hash_t	file:
opcode	src/sock.c	/^	unsigned char opcode;$/;"	m	struct:dnsquery_header	file:
open_handler	src/xmpp.h	/^    xmpp_open_handler open_handler;$/;"	m	struct:_XmppConn
parent	src/stanza.h	/^    XmppStanza *parent;$/;"	m	struct:_XmppStanza
parser	src/xmpp.h	/^    Parser *parser;$/;"	m	struct:_XmppConn
parser_end_callback	src/parser.h	/^typedef void (*parser_end_callback)(char *name, void * const userdata);$/;"	t
parser_feed	src/parser.c	/^int parser_feed(Parser *parser, char *chunk, int len)$/;"	f
parser_free	src/parser.c	/^void parser_free(Parser *parser)$/;"	f
parser_new	src/parser.c	/^Parser *parser_new(parser_start_callback startcb,$/;"	f
parser_reset	src/parser.c	/^int parser_reset(Parser *parser)$/;"	f
parser_stanza_callback	src/parser.h	/^typedef void (*parser_stanza_callback)(XmppStanza *stanza,$/;"	t
parser_start_callback	src/parser.h	/^typedef void (*parser_start_callback)(char *name,$/;"	t
pass	src/xmpp.h	/^    char *pass;$/;"	m	struct:_XmppConn
period	src/smarta.h	/^    long period;$/;"	m	struct:_Service
period	src/xmpp.h	/^	    unsigned long period;$/;"	m	struct:_xmpp_handlist_t::__anon9::__anon10
pidfile	src/smarta.h	/^    char *pidfile;$/;"	m	struct:_Smarta
port	src/sock.c	/^	unsigned short port;$/;"	m	struct:dnsquery_srvrdata	file:
prev	src/adlist.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
prev	src/stanza.h	/^    XmppStanza *prev;$/;"	m	struct:_XmppStanza
priority	src/sock.c	/^	unsigned short priority;$/;"	m	struct:dnsquery_srvrdata	file:
qclass	src/sock.c	/^	unsigned short qclass;$/;"	m	struct:dnsquery_question	file:
qdcount	src/sock.c	/^	unsigned short qdcount;$/;"	m	struct:dnsquery_header	file:
qname	src/sock.c	/^	char qname[1024];$/;"	m	struct:dnsquery_question	file:
qr	src/sock.c	/^	unsigned char qr;$/;"	m	struct:dnsquery_header	file:
qtype	src/sock.c	/^	unsigned short qtype;$/;"	m	struct:dnsquery_question	file:
ra	src/sock.c	/^	unsigned char ra;$/;"	m	struct:dnsquery_header	file:
rcode	src/sock.c	/^	unsigned char rcode;$/;"	m	struct:dnsquery_header	file:
rd	src/sock.c	/^	unsigned char rd;$/;"	m	struct:dnsquery_header	file:
rdata	src/sock.c	/^	struct dnsquery_srvrdata rdata;$/;"	m	struct:dnsquery_resourcerecord	typeref:struct:dnsquery_resourcerecord::dnsquery_srvrdata	file:
rdlength	src/sock.c	/^	unsigned short rdlength;$/;"	m	struct:dnsquery_resourcerecord	file:
ref	src/hash.c	/^    unsigned int ref;$/;"	m	struct:_hash_iterator_t	file:
ref	src/hash.c	/^    unsigned int ref;$/;"	m	struct:_hash_t	file:
ref	src/stanza.h	/^    int ref;$/;"	m	struct:_XmppStanza
ref	src/xmpp.h	/^    unsigned int ref;$/;"	m	struct:_XmppConn
reset_parser	src/xmpp.h	/^    int reset_parser;$/;"	m	struct:_XmppConn
rol	src/sha1.c	/^#define rol(/;"	d	file:
sasl_digest_md5	src/sasl.c	/^char *sasl_digest_md5(const char *challenge,$/;"	f
sasl_plain	src/sasl.c	/^char *sasl_plain(const char *authid, const char *password) {$/;"	f
sasl_support	src/xmpp.h	/^    int sasl_support; \/* if true, field is a bitfield of supported $/;"	m	struct:_XmppConn
sched_services	src/sched.c	/^void sched_services(XmppConn *conn) {$/;"	f
sds	src/sds.h	/^typedef char *sds;$/;"	t
sdsMakeRoomFor	src/sds.c	/^static sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f	file:
sdsOomAbort	src/sds.c	/^static void sdsOomAbort(void) {$/;"	f	file:
sdsavail	src/sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdscat	src/sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscatlen	src/sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatprintf	src/sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	src/sds.c	/^sds sdscatrepr(sds s, char *p, size_t len) {$/;"	f
sdscatvprintf	src/sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdscmp	src/sds.c	/^int sdscmp(sds s1, sds s2) {$/;"	f
sdscpy	src/sds.c	/^sds sdscpy(sds s, char *t) {$/;"	f
sdscpylen	src/sds.c	/^sds sdscpylen(sds s, char *t, size_t len) {$/;"	f
sdsdup	src/sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	src/sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	src/sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	src/sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	src/sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	src/sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdshdr	src/sds.h	/^struct sdshdr {$/;"	s
sdslen	src/sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdsnew	src/sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	src/sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	src/sds.c	/^sds sdsrange(sds s, int start, int end) {$/;"	f
sdssplitargs	src/sds.c	/^sds *sdssplitargs(char *line, int *argc) {$/;"	f
sdssplitlen	src/sds.c	/^sds *sdssplitlen(char *s, int len, char *sep, int seplen, int *count) {$/;"	f
sdstolower	src/sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	src/sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	src/sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdsupdatelen	src/sds.c	/^void sdsupdatelen(sds s) {$/;"	f
secured	src/xmpp.h	/^    int secured; \/* set when stream is secured with TLS *\/$/;"	m	struct:_XmppConn
send_message	src/sched.c	/^void send_message(XmppConn *conn, sds result) {$/;"	f
send_queue_head	src/xmpp.h	/^    xmpp_send_queue_t *send_queue_head;$/;"	m	struct:_XmppConn
send_queue_len	src/xmpp.h	/^    int send_queue_len;$/;"	m	struct:_XmppConn
send_queue_max	src/xmpp.h	/^    int send_queue_max;$/;"	m	struct:_XmppConn
send_queue_tail	src/xmpp.h	/^    xmpp_send_queue_t *send_queue_tail;$/;"	m	struct:_XmppConn
server	src/smarta.h	/^    char *server;$/;"	m	struct:_Smarta
services	src/smarta.h	/^    list *services;$/;"	m	struct:_Smarta
session	src/tls_gnutls.c	/^    gnutls_session_t session;$/;"	m	struct:_tls	file:
session_required	src/xmpp.h	/^    int session_required;$/;"	m	struct:_XmppConn
smarta	src/smarta.c	/^Smarta smarta;$/;"	v
sock	src/tls_dummy.c	/^    sock_t sock;$/;"	m	struct:_tls	file:
sock	src/tls_gnutls.c	/^    sock_t sock;$/;"	m	struct:_tls	file:
sock	src/tls_openssl.c	/^    sock_t sock;$/;"	m	struct:_tls	file:
sock	src/xmpp.h	/^    sock_t sock;$/;"	m	struct:_XmppConn
sock_close	src/sock.c	/^int sock_close(const sock_t sock)$/;"	f
sock_connect	src/sock.c	/^sock_t sock_connect(const char * const host, const unsigned int port)$/;"	f
sock_connect_error	src/sock.c	/^int sock_connect_error(const sock_t sock) {$/;"	f
sock_error	src/sock.c	/^int sock_error(void)$/;"	f
sock_initialize	src/sock.c	/^void sock_initialize(void)$/;"	f
sock_is_recoverable	src/sock.c	/^int sock_is_recoverable(const int error) {$/;"	f
sock_read	src/sock.c	/^int sock_read(const sock_t sock, void * const buff, const size_t len) {$/;"	f
sock_set_blocking	src/sock.c	/^int sock_set_blocking(const sock_t sock)$/;"	f
sock_set_nonblocking	src/sock.c	/^int sock_set_nonblocking(const sock_t sock) {$/;"	f
sock_shutdown	src/sock.c	/^void sock_shutdown(void)$/;"	f
sock_t	src/sock.h	/^typedef int sock_t;$/;"	t
sock_write	src/sock.c	/^int sock_write(const sock_t sock, const void * const buff, const size_t len) {$/;"	f
ssl	src/tls_openssl.c	/^    SSL *ssl;$/;"	m	struct:_tls	file:
ssl_ctx	src/tls_openssl.c	/^    SSL_CTX *ssl_ctx;$/;"	m	struct:_tls	file:
stanza	src/parser.h	/^    XmppStanza *stanza;$/;"	m	struct:_Parser
stanza	src/xmpp.h	/^    XmppStanza *stanza;$/;"	m	struct:_xmpp_stream_error_t
stanzacb	src/parser.h	/^    parser_stanza_callback stanzacb;$/;"	m	struct:_Parser
startcb	src/parser.h	/^    parser_start_callback startcb;$/;"	m	struct:_Parser
state	src/sha1.h	/^    uint32_t state[5];$/;"	m	struct:__anon1
state	src/xmpp.h	/^    xmpp_conn_state_t state;$/;"	m	struct:_XmppConn
stream_error	src/xmpp.h	/^    xmpp_stream_error_t *stream_error;$/;"	m	struct:_XmppConn
stream_id	src/xmpp.h	/^    char *stream_id;$/;"	m	struct:_XmppConn
table	src/hash.c	/^    hash_t *table;$/;"	m	struct:_hash_iterator_t	file:
tail	src/adlist.h	/^    listNode *tail;$/;"	m	struct:list
target	src/sock.c	/^	char target[1024];$/;"	m	struct:dnsquery_srvrdata	file:
tc	src/sock.c	/^	unsigned char tc;$/;"	m	struct:dnsquery_header	file:
test_cond	src/sds.c	/^#define test_cond(/;"	d	file:
test_data	src/sha1.c	/^static char *test_data[] = {$/;"	v	file:
test_report	src/sds.c	/^#define test_report(/;"	d	file:
test_results	src/sha1.c	/^static char *test_results[] = {$/;"	v	file:
text	src/xmpp.h	/^    char *text;$/;"	m	struct:_xmpp_stream_error_t
time_elapsed	src/util.c	/^uint64_t time_elapsed(uint64_t t1, uint64_t t2) {$/;"	f
time_stamp	src/util.c	/^uint64_t time_stamp(void) {$/;"	f
timed_handlers	src/xmpp.h	/^    xmpp_handlist_t *timed_handlers;$/;"	m	struct:_XmppConn
timeout_stamp	src/xmpp.h	/^    uint64_t timeout_stamp;$/;"	m	struct:_XmppConn
tls	src/xmpp.h	/^    tls_t *tls;$/;"	m	struct:_XmppConn
tls_clear_pending_write	src/tls_dummy.c	/^int tls_clear_pending_write(tls_t *tls)$/;"	f
tls_clear_pending_write	src/tls_openssl.c	/^int tls_clear_pending_write(tls_t *tls)$/;"	f
tls_error	src/tls_dummy.c	/^int tls_error(tls_t *tls)$/;"	f
tls_error	src/tls_gnutls.c	/^int tls_error(tls_t *tls)$/;"	f
tls_error	src/tls_openssl.c	/^int tls_error(tls_t *tls)$/;"	f
tls_failed	src/xmpp.h	/^    int tls_failed; \/* set when tls fails, so we don't try again *\/$/;"	m	struct:_XmppConn
tls_free	src/tls_dummy.c	/^void tls_free(tls_t *tls)$/;"	f
tls_free	src/tls_gnutls.c	/^void tls_free(tls_t *tls)$/;"	f
tls_free	src/tls_openssl.c	/^void tls_free(tls_t *tls)$/;"	f
tls_initialize	src/tls_dummy.c	/^void tls_initialize(void)$/;"	f
tls_initialize	src/tls_gnutls.c	/^void tls_initialize(void)$/;"	f
tls_initialize	src/tls_openssl.c	/^void tls_initialize(void)$/;"	f
tls_is_recoverable	src/tls_dummy.c	/^int tls_is_recoverable(int error)$/;"	f
tls_is_recoverable	src/tls_openssl.c	/^int tls_is_recoverable(int error)$/;"	f
tls_new	src/tls_dummy.c	/^tls_t *tls_new(sock_t sock)$/;"	f
tls_new	src/tls_gnutls.c	/^tls_t *tls_new(sock_t sock)$/;"	f
tls_new	src/tls_openssl.c	/^tls_t *tls_new(sock_t sock)$/;"	f
tls_read	src/tls_dummy.c	/^int tls_read(tls_t *tls, void * const buff, const size_t len)$/;"	f
tls_read	src/tls_gnutls.c	/^int tls_read(tls_t *tls, void * const buff, const size_t len)$/;"	f
tls_read	src/tls_openssl.c	/^int tls_read(tls_t *tls, void * const buff, const size_t len)$/;"	f
tls_set_credentials	src/tls_dummy.c	/^int tls_set_credentials(tls_t *tls, const char *cafilename)$/;"	f
tls_set_credentials	src/tls_gnutls.c	/^int tls_set_credentials(tls_t *tls, const char *cafilename)$/;"	f
tls_set_credentials	src/tls_openssl.c	/^int tls_set_credentials(tls_t *tls, const char *cafilename)$/;"	f
tls_shutdown	src/tls_dummy.c	/^void tls_shutdown(void)$/;"	f
tls_shutdown	src/tls_gnutls.c	/^void tls_shutdown(void)$/;"	f
tls_shutdown	src/tls_openssl.c	/^void tls_shutdown(void)$/;"	f
tls_start	src/tls_dummy.c	/^int tls_start(tls_t *tls)$/;"	f
tls_start	src/tls_gnutls.c	/^int tls_start(tls_t *tls)$/;"	f
tls_start	src/tls_openssl.c	/^int tls_start(tls_t *tls)$/;"	f
tls_stop	src/tls_dummy.c	/^int tls_stop(tls_t *tls)$/;"	f
tls_stop	src/tls_gnutls.c	/^int tls_stop(tls_t *tls)$/;"	f
tls_stop	src/tls_openssl.c	/^int tls_stop(tls_t *tls)$/;"	f
tls_support	src/xmpp.h	/^    int tls_support;$/;"	m	struct:_XmppConn
tls_t	src/tls.h	/^typedef struct _tls tls_t;$/;"	t	typeref:struct:_tls
tls_write	src/tls_dummy.c	/^int tls_write(tls_t *tls, const void * const buff, const size_t len)$/;"	f
tls_write	src/tls_gnutls.c	/^int tls_write(tls_t *tls, const void * const buff, const size_t len)$/;"	f
tls_write	src/tls_openssl.c	/^int tls_write(tls_t *tls, const void * const buff, const size_t len)$/;"	f
ttl	src/sock.c	/^	unsigned int ttl;$/;"	m	struct:dnsquery_resourcerecord	file:
type	src/sock.c	/^	unsigned short type;$/;"	m	struct:dnsquery_resourcerecord	file:
type	src/stanza.h	/^    XmppStanzaType type;$/;"	m	struct:_XmppStanza
type	src/xmpp.h	/^	    char *type;$/;"	m	struct:_xmpp_handlist_t::__anon9::__anon12
type	src/xmpp.h	/^    xmpp_conn_type_t type;$/;"	m	struct:_XmppConn
type	src/xmpp.h	/^    xmpp_error_type_t type;$/;"	m	struct:_xmpp_stream_error_t
uint16_t	src/sasl.c	/^  typedef unsigned short int        uint16_t;$/;"	t	file:
uint16_t	src/sha1.c	/^  typedef unsigned short int        uint16_t;$/;"	t	file:
uint32_t	src/md5.h	/^  typedef unsigned int              uint32_t;$/;"	t
uint32_t	src/sasl.c	/^  typedef unsigned int              uint32_t;$/;"	t	file:
uint32_t	src/sha1.c	/^  typedef unsigned int              uint32_t;$/;"	t	file:
uint8_t	src/sasl.c	/^  typedef unsigned char             uint8_t;$/;"	t	file:
uint8_t	src/sha1.c	/^  typedef unsigned char             uint8_t;$/;"	t	file:
usage	src/smarta.c	/^void usage() {$/;"	f
usage	src/smarta.h	/^    char *usage;$/;"	m	struct:_Command
user_handler	src/xmpp.h	/^    int user_handler;$/;"	m	struct:_xmpp_handlist_t
userdata	src/parser.h	/^    void *userdata;$/;"	m	struct:_Parser
userdata	src/xmpp.h	/^    void *userdata;$/;"	m	struct:_XmppConn
userdata	src/xmpp.h	/^    void *userdata;$/;"	m	struct:_xmpp_handlist_t
userdata	src/xmpp.h	/^    void *userdata;$/;"	m	struct:_xmpp_log_t
value	src/adlist.h	/^    void *value;$/;"	m	struct:listNode
value	src/hash.c	/^    void *value;$/;"	m	struct:_hashentry_t	file:
verbosity	src/smarta.h	/^    int verbosity;$/;"	m	struct:_Smarta
version	src/smarta.c	/^void version() {$/;"	f
version_handler	src/smarta.c	/^int version_handler(XmppConn * const conn, XmppStanza * const stanza, void * const userdata)$/;"	f
weight	src/sock.c	/^	unsigned short weight;$/;"	m	struct:dnsquery_srvrdata	file:
written	src/xmpp.h	/^    size_t written;$/;"	m	struct:_xmpp_send_queue_t
xmpp_conn_clone	src/conn.c	/^XmppConn *xmpp_conn_clone(XmppConn * const conn)$/;"	f
xmpp_conn_event_t	src/xmpp.h	/^} xmpp_conn_event_t;$/;"	t	typeref:enum:__anon6
xmpp_conn_get_bound_jid	src/conn.c	/^char *xmpp_conn_get_bound_jid(XmppConn *conn) {$/;"	f
xmpp_conn_get_jid	src/conn.c	/^char *xmpp_conn_get_jid(XmppConn * conn) {$/;"	f
xmpp_conn_get_pass	src/conn.c	/^char *xmpp_conn_get_pass(XmppConn *conn) {$/;"	f
xmpp_conn_handler	src/xmpp.h	/^typedef void (*xmpp_conn_handler)(XmppConn * const conn, $/;"	t
xmpp_conn_new	src/conn.c	/^XmppConn *xmpp_conn_new()$/;"	f
xmpp_conn_release	src/conn.c	/^int xmpp_conn_release(XmppConn * const conn)$/;"	f
xmpp_conn_set_jid	src/conn.c	/^void xmpp_conn_set_jid(XmppConn *conn, const char *jid)$/;"	f
xmpp_conn_set_pass	src/conn.c	/^void xmpp_conn_set_pass(XmppConn *conn, const char *pass) {$/;"	f
xmpp_conn_state_t	src/xmpp.h	/^} xmpp_conn_state_t;$/;"	t	typeref:enum:__anon8
xmpp_conn_type_t	src/xmpp.h	/^} xmpp_conn_type_t;$/;"	t	typeref:enum:__anon5
xmpp_connect_client	src/conn.c	/^int xmpp_connect_client(XmppConn * const conn, $/;"	f
xmpp_disconnect	src/conn.c	/^void xmpp_disconnect(XmppConn * const conn)$/;"	f
xmpp_error_type_t	src/xmpp.h	/^} xmpp_error_type_t;$/;"	t	typeref:enum:__anon7
xmpp_handler	src/xmpp.h	/^typedef int (*xmpp_handler)(XmppConn * const conn,$/;"	t
xmpp_handler_add	src/handler.c	/^void xmpp_handler_add(XmppConn * const conn,$/;"	f
xmpp_handler_delete	src/handler.c	/^void xmpp_handler_delete(XmppConn * const conn,$/;"	f
xmpp_handlist_t	src/xmpp.h	/^typedef struct _xmpp_handlist_t xmpp_handlist_t;$/;"	t	typeref:struct:_xmpp_handlist_t
xmpp_id_handler_add	src/handler.c	/^void xmpp_id_handler_add(XmppConn * const conn,$/;"	f
xmpp_id_handler_delete	src/handler.c	/^void xmpp_id_handler_delete(XmppConn * const conn,$/;"	f
xmpp_initialize	src/xmpp.c	/^ void xmpp_initialize(void)$/;"	f
xmpp_jid_bare	src/jid.c	/^char *xmpp_jid_bare(const char *jid)$/;"	f
xmpp_jid_domain	src/jid.c	/^char *xmpp_jid_domain(const char *jid)$/;"	f
xmpp_jid_new	src/jid.c	/^char *xmpp_jid_new(const char *node,$/;"	f
xmpp_jid_node	src/jid.c	/^char *xmpp_jid_node(const char *jid)$/;"	f
xmpp_jid_resource	src/jid.c	/^char *xmpp_jid_resource(const char *jid)$/;"	f
xmpp_log	src/smarta.c	/^void xmpp_log(int level, const char *fmt, ...) {$/;"	f
xmpp_log_handler	src/xmpp.h	/^typedef void (*xmpp_log_handler)(void * const userdata, $/;"	t
xmpp_log_level_t	src/xmpp.h	/^} xmpp_log_level_t;$/;"	t	typeref:enum:__anon4
xmpp_loop_status_t	src/xmpp.h	/^} xmpp_loop_status_t;$/;"	t	typeref:enum:__anon3
xmpp_open_handler	src/xmpp.h	/^typedef void (*xmpp_open_handler)(XmppConn * const conn);$/;"	t
xmpp_run	src/event.c	/^void xmpp_run(XmppConn *conn) {$/;"	f
xmpp_run_once	src/event.c	/^void xmpp_run_once(XmppConn *conn, const unsigned long timeout)$/;"	f
xmpp_send	src/conn.c	/^void xmpp_send(XmppConn * const conn,$/;"	f
xmpp_send_queue_t	src/xmpp.h	/^typedef struct _xmpp_send_queue_t xmpp_send_queue_t;$/;"	t	typeref:struct:_xmpp_send_queue_t
xmpp_send_raw	src/conn.c	/^void xmpp_send_raw(XmppConn * const conn,$/;"	f
xmpp_send_raw_string	src/conn.c	/^void xmpp_send_raw_string(XmppConn * const conn, $/;"	f
xmpp_shutdown	src/xmpp.c	/^void xmpp_shutdown(void)$/;"	f
xmpp_snprintf	src/snprintf.c	/^int xmpp_snprintf (char *str,size_t count,const char *fmt,...)$/;"	f
xmpp_stanza_add_child	src/stanza.c	/^int xmpp_stanza_add_child(XmppStanza *stanza, XmppStanza *child)$/;"	f
xmpp_stanza_clone	src/stanza.c	/^XmppStanza *xmpp_stanza_clone(XmppStanza * const stanza)$/;"	f
xmpp_stanza_copy	src/stanza.c	/^XmppStanza *xmpp_stanza_copy(const XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_attribute	src/stanza.c	/^char *xmpp_stanza_get_attribute(XmppStanza * const stanza,$/;"	f
xmpp_stanza_get_attribute_count	src/stanza.c	/^int xmpp_stanza_get_attribute_count(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_attributes	src/stanza.c	/^int xmpp_stanza_get_attributes(XmppStanza * const stanza,$/;"	f
xmpp_stanza_get_child_by_name	src/stanza.c	/^XmppStanza *xmpp_stanza_get_child_by_name(XmppStanza * const stanza, $/;"	f
xmpp_stanza_get_child_by_ns	src/stanza.c	/^XmppStanza *xmpp_stanza_get_child_by_ns(XmppStanza * const stanza,$/;"	f
xmpp_stanza_get_children	src/stanza.c	/^XmppStanza *xmpp_stanza_get_children(XmppStanza * const stanza) $/;"	f
xmpp_stanza_get_id	src/stanza.c	/^char *xmpp_stanza_get_id(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_name	src/stanza.c	/^char *xmpp_stanza_get_name(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_next	src/stanza.c	/^XmppStanza *xmpp_stanza_get_next(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_ns	src/stanza.c	/^char *xmpp_stanza_get_ns(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_text	src/stanza.c	/^char *xmpp_stanza_get_text(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_text_ptr	src/stanza.c	/^char *xmpp_stanza_get_text_ptr(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_type	src/stanza.c	/^char *xmpp_stanza_get_type(XmppStanza * const stanza)$/;"	f
xmpp_stanza_is_tag	src/stanza.c	/^int xmpp_stanza_is_tag(XmppStanza * const stanza)$/;"	f
xmpp_stanza_is_text	src/stanza.c	/^int xmpp_stanza_is_text(XmppStanza * const stanza)$/;"	f
xmpp_stanza_new	src/stanza.c	/^XmppStanza *xmpp_stanza_new()$/;"	f
xmpp_stanza_release	src/stanza.c	/^int xmpp_stanza_release(XmppStanza * const stanza)$/;"	f
xmpp_stanza_set_attribute	src/stanza.c	/^int xmpp_stanza_set_attribute(XmppStanza * const stanza,$/;"	f
xmpp_stanza_set_id	src/stanza.c	/^int xmpp_stanza_set_id(XmppStanza * const stanza,$/;"	f
xmpp_stanza_set_name	src/stanza.c	/^int xmpp_stanza_set_name(XmppStanza *stanza, $/;"	f
xmpp_stanza_set_ns	src/stanza.c	/^int xmpp_stanza_set_ns(XmppStanza * const stanza,$/;"	f
xmpp_stanza_set_text	src/stanza.c	/^int xmpp_stanza_set_text(XmppStanza *stanza,$/;"	f
xmpp_stanza_set_text_with_size	src/stanza.c	/^int xmpp_stanza_set_text_with_size(XmppStanza *stanza,$/;"	f
xmpp_stanza_set_type	src/stanza.c	/^int xmpp_stanza_set_type(XmppStanza * const stanza,$/;"	f
xmpp_stop	src/event.c	/^void xmpp_stop(XmppConn *conn) {$/;"	f
xmpp_stream_error_t	src/xmpp.h	/^typedef struct _xmpp_stream_error_t xmpp_stream_error_t;$/;"	t	typeref:struct:_xmpp_stream_error_t
xmpp_timed_handler	src/xmpp.h	/^typedef int (*xmpp_timed_handler)(XmppConn * const conn, $/;"	t
xmpp_timed_handler_add	src/handler.c	/^void xmpp_timed_handler_add(XmppConn * const conn,$/;"	f
xmpp_timed_handler_delete	src/handler.c	/^void xmpp_timed_handler_delete(XmppConn * const conn,$/;"	f
xmpp_version_check	src/xmpp.c	/^int xmpp_version_check(int major, int minor)$/;"	f
xmpp_vsnprintf	src/snprintf.c	/^int xmpp_vsnprintf (char *str, size_t count, const char *fmt, va_list args)$/;"	f
yesnotoi	src/smarta.c	/^int yesnotoi(char *s) {$/;"	f
z	src/sock.c	/^	unsigned char z;$/;"	m	struct:dnsquery_header	file:
zstrdup	src/smarta.c	/^char *zstrdup(const char *s) {$/;"	f
