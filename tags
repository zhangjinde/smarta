!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AE_ALL_EVENTS	src/ae.h	/^#define AE_ALL_EVENTS /;"	d
AE_DONT_WAIT	src/ae.h	/^#define AE_DONT_WAIT /;"	d
AE_ERR	src/ae.h	/^#define AE_ERR /;"	d
AE_FILE_EVENTS	src/ae.h	/^#define AE_FILE_EVENTS /;"	d
AE_NOMORE	src/ae.h	/^#define AE_NOMORE /;"	d
AE_NONE	src/ae.h	/^#define AE_NONE /;"	d
AE_NOTUSED	src/ae.h	/^#define AE_NOTUSED(/;"	d
AE_OK	src/ae.h	/^#define AE_OK /;"	d
AE_READABLE	src/ae.h	/^#define AE_READABLE /;"	d
AE_SETSIZE	src/ae.h	/^#define AE_SETSIZE /;"	d
AE_TIME_EVENTS	src/ae.h	/^#define AE_TIME_EVENTS /;"	d
AE_WRITABLE	src/ae.h	/^#define AE_WRITABLE /;"	d
AF_LOCAL	src/anet.h	/^#define AF_LOCAL /;"	d
AL_START_HEAD	src/adlist.h	/^#define AL_START_HEAD /;"	d
AL_START_TAIL	src/adlist.h	/^#define AL_START_TAIL /;"	d
ANET_CONNECT_NONBLOCK	src/anet.c	/^#define ANET_CONNECT_NONBLOCK /;"	d	file:
ANET_CONNECT_NONE	src/anet.c	/^#define ANET_CONNECT_NONE /;"	d	file:
ANET_ERR	src/anet.h	/^#define ANET_ERR /;"	d
ANET_ERR_LEN	src/anet.h	/^#define ANET_ERR_LEN /;"	d
ANET_H	src/anet.h	/^#define ANET_H$/;"	d
ANET_OK	src/anet.h	/^#define ANET_OK /;"	d
CONFIGLINE_MAX	src/smarta.c	/^#define CONFIGLINE_MAX /;"	d	file:
Command	src/smarta.h	/^} Command;$/;"	t	typeref:struct:_Command
DICT_ERR	src/dict.h	/^#define DICT_ERR /;"	d
DICT_HT_INITIAL_SIZE	src/dict.h	/^#define DICT_HT_INITIAL_SIZE /;"	d
DICT_NOTUSED	src/dict.h	/^#define DICT_NOTUSED(/;"	d
DICT_OK	src/dict.h	/^#define DICT_OK /;"	d
DICT_STATS_VECTLEN	src/dict.c	/^#define DICT_STATS_VECTLEN /;"	d	file:
DP_C_LDOUBLE	src/snprintf.c	/^#define DP_C_LDOUBLE /;"	d	file:
DP_C_LONG	src/snprintf.c	/^#define DP_C_LONG /;"	d	file:
DP_C_SHORT	src/snprintf.c	/^#define DP_C_SHORT /;"	d	file:
DP_F_MINUS	src/snprintf.c	/^#define DP_F_MINUS /;"	d	file:
DP_F_NUM	src/snprintf.c	/^#define DP_F_NUM /;"	d	file:
DP_F_PLUS	src/snprintf.c	/^#define DP_F_PLUS /;"	d	file:
DP_F_SPACE	src/snprintf.c	/^#define DP_F_SPACE /;"	d	file:
DP_F_UNSIGNED	src/snprintf.c	/^#define DP_F_UNSIGNED /;"	d	file:
DP_F_UP	src/snprintf.c	/^#define DP_F_UP /;"	d	file:
DP_F_ZERO	src/snprintf.c	/^#define DP_F_ZERO /;"	d	file:
DP_S_CONV	src/snprintf.c	/^#define DP_S_CONV /;"	d	file:
DP_S_DEFAULT	src/snprintf.c	/^#define DP_S_DEFAULT /;"	d	file:
DP_S_DONE	src/snprintf.c	/^#define DP_S_DONE /;"	d	file:
DP_S_DOT	src/snprintf.c	/^#define DP_S_DOT /;"	d	file:
DP_S_FLAGS	src/snprintf.c	/^#define DP_S_FLAGS /;"	d	file:
DP_S_MAX	src/snprintf.c	/^#define DP_S_MAX /;"	d	file:
DP_S_MIN	src/snprintf.c	/^#define DP_S_MIN /;"	d	file:
DP_S_MOD	src/snprintf.c	/^#define DP_S_MOD /;"	d	file:
F1	src/md5.c	/^#define F1(/;"	d	file:
F2	src/md5.c	/^#define F2(/;"	d	file:
F3	src/md5.c	/^#define F3(/;"	d	file:
F4	src/md5.c	/^#define F4(/;"	d	file:
GET_32BIT_LSB_FIRST	src/md5.c	/^#define GET_32BIT_LSB_FIRST(/;"	d	file:
HAVE_BACKTRACE	src/config.h	/^#define HAVE_BACKTRACE /;"	d
HAVE_EPOLL	src/config.h	/^#define HAVE_EPOLL /;"	d
HAVE_KQUEUE	src/config.h	/^#define HAVE_KQUEUE /;"	d
HAVE_PROCFS	src/config.h	/^#define HAVE_PROCFS /;"	d
HAVE_STDARGS	src/snprintf.c	/^#  undef HAVE_STDARGS$/;"	d	file:
HAVE_STDARGS	src/snprintf.c	/^# define HAVE_STDARGS /;"	d	file:
HAVE_STDARG_H	src/snprintf.c	/^#define HAVE_STDARG_H /;"	d	file:
HAVE_TASKINFO	src/config.h	/^#define HAVE_TASKINFO /;"	d
HAVE_VARARGS_H	src/snprintf.c	/^#define HAVE_VARARGS_H$/;"	d	file:
IN_COMMADN_BLOCK	src/smarta.c	/^#define IN_COMMADN_BLOCK /;"	d	file:
IN_SERVICE_BLOCK	src/smarta.c	/^#define IN_SERVICE_BLOCK /;"	d	file:
IN_SMARTA_BLOCK	src/smarta.c	/^#define IN_SMARTA_BLOCK /;"	d	file:
LDOUBLE	src/snprintf.c	/^#define LDOUBLE /;"	d	file:
LOG_DEBUG	src/xmpp.h	/^#define LOG_DEBUG /;"	d
LOG_ERROR	src/xmpp.h	/^#define LOG_ERROR /;"	d
LOG_INFO	src/xmpp.h	/^#define LOG_INFO /;"	d
LOG_WARN	src/xmpp.h	/^#define LOG_WARN /;"	d
LONG_STRING	src/snprintf.c	/^#define LONG_STRING /;"	d	file:
MAX	src/snprintf.c	/^#define MAX(/;"	d	file:
MAX_INPUT_BUFFER	src/sched.c	/^#define MAX_INPUT_BUFFER /;"	d	file:
MAX_LOGMSG_LEN	src/xmpp.h	/^#define MAX_LOGMSG_LEN /;"	d
MD5Context	src/md5.h	/^struct MD5Context {$/;"	s
MD5DumpBytes	src/md5.c	/^void MD5DumpBytes(unsigned char *b, int len) {$/;"	f
MD5Final	src/md5.c	/^void MD5Final(unsigned char digest[16], struct MD5Context *ctx) {$/;"	f
MD5Init	src/md5.c	/^void MD5Init(struct MD5Context *ctx) {$/;"	f
MD5STEP	src/md5.c	/^#define MD5STEP(/;"	d	file:
MD5Transform	src/md5.c	/^void MD5Transform(uint32_t buf[4], const unsigned char inext[64],$/;"	f
MD5Update	src/md5.c	/^void MD5Update(struct MD5Context *ctx, unsigned char const *buf, uint32_t len) {$/;"	f
MD5_H	src/md5.h	/^#define MD5_H$/;"	d
MIN	src/snprintf.c	/^#define MIN(/;"	d	file:
PUT_32BIT_LSB_FIRST	src/md5.c	/^#define PUT_32BIT_LSB_FIRST(/;"	d	file:
Parser	src/parser.h	/^} Parser;$/;"	t	typeref:struct:_Parser
R0	src/sha1.c	/^#define R0(/;"	d	file:
R1	src/sha1.c	/^#define R1(/;"	d	file:
R2	src/sha1.c	/^#define R2(/;"	d	file:
R3	src/sha1.c	/^#define R3(/;"	d	file:
R4	src/sha1.c	/^#define R4(/;"	d	file:
SASL_MASK_ANONYMOUS	src/xmpp.h	/^#define SASL_MASK_ANONYMOUS /;"	d
SASL_MASK_DIGESTMD5	src/xmpp.h	/^#define SASL_MASK_DIGESTMD5 /;"	d
SASL_MASK_PLAIN	src/xmpp.h	/^#define SASL_MASK_PLAIN /;"	d
SHA1_CTX	src/sha1.h	/^} SHA1_CTX;$/;"	t	typeref:struct:__anon1
SHA1_DIGEST_SIZE	src/sha1.h	/^#define SHA1_DIGEST_SIZE /;"	d
SHA1_Final	src/sha1.c	/^void SHA1_Final(SHA1_CTX* context, uint8_t digest[SHA1_DIGEST_SIZE]) {$/;"	f
SHA1_Init	src/sha1.c	/^void SHA1_Init(SHA1_CTX* context) {$/;"	f
SHA1_Transform	src/sha1.c	/^void SHA1_Transform(uint32_t state[5], const uint8_t buffer[64]) {$/;"	f
SHA1_Update	src/sha1.c	/^void SHA1_Update(SHA1_CTX* context, const uint8_t* data, const size_t len)$/;"	f
SHAPrintContext	src/sha1.c	/^void SHAPrintContext(SHA1_CTX *context, char *msg){$/;"	f
Service	src/smarta.h	/^} Service;$/;"	t	typeref:struct:_Service
Smarta	src/smarta.h	/^} Smarta;$/;"	t	typeref:struct:_Smarta
VA_END	src/snprintf.c	/^#  define VA_END /;"	d	file:
VA_END	src/snprintf.c	/^# define VA_END /;"	d	file:
VA_LOCAL_DECL	src/snprintf.c	/^#  define VA_LOCAL_DECL /;"	d	file:
VA_LOCAL_DECL	src/snprintf.c	/^# define VA_LOCAL_DECL /;"	d	file:
VA_SHIFT	src/snprintf.c	/^#  define VA_SHIFT(/;"	d	file:
VA_SHIFT	src/snprintf.c	/^# define VA_SHIFT(/;"	d	file:
VA_START	src/snprintf.c	/^#  define VA_START(/;"	d	file:
VA_START	src/snprintf.c	/^# define VA_START(/;"	d	file:
XMPP_EINT	src/xmpp.h	/^#define XMPP_EINT /;"	d
XMPP_EINVOP	src/xmpp.h	/^#define XMPP_EINVOP /;"	d
XMPP_EMEM	src/xmpp.h	/^#define XMPP_EMEM /;"	d
XMPP_NS_AUTH	src/xmpp.h	/^#define XMPP_NS_AUTH /;"	d
XMPP_NS_BIND	src/xmpp.h	/^#define XMPP_NS_BIND /;"	d
XMPP_NS_CLIENT	src/xmpp.h	/^#define XMPP_NS_CLIENT /;"	d
XMPP_NS_COMPONENT	src/xmpp.h	/^#define XMPP_NS_COMPONENT /;"	d
XMPP_NS_DISCO_INFO	src/xmpp.h	/^#define XMPP_NS_DISCO_INFO /;"	d
XMPP_NS_DISCO_ITEMS	src/xmpp.h	/^#define XMPP_NS_DISCO_ITEMS /;"	d
XMPP_NS_ROSTER	src/xmpp.h	/^#define XMPP_NS_ROSTER /;"	d
XMPP_NS_SASL	src/xmpp.h	/^#define XMPP_NS_SASL /;"	d
XMPP_NS_SESSION	src/xmpp.h	/^#define XMPP_NS_SESSION /;"	d
XMPP_NS_STREAMS	src/xmpp.h	/^#define XMPP_NS_STREAMS /;"	d
XMPP_NS_STREAMS_IETF	src/xmpp.h	/^#define XMPP_NS_STREAMS_IETF /;"	d
XMPP_NS_TLS	src/xmpp.h	/^#define XMPP_NS_TLS /;"	d
XMPP_OK	src/xmpp.h	/^#define XMPP_OK /;"	d
XMPP_SE_BAD_FORMAT	src/xmpp.h	/^    XMPP_SE_BAD_FORMAT,$/;"	e	enum:__anon3
XMPP_SE_BAD_NS_PREFIX	src/xmpp.h	/^    XMPP_SE_BAD_NS_PREFIX,$/;"	e	enum:__anon3
XMPP_SE_CONFLICT	src/xmpp.h	/^    XMPP_SE_CONFLICT,$/;"	e	enum:__anon3
XMPP_SE_CONN_TIMEOUT	src/xmpp.h	/^    XMPP_SE_CONN_TIMEOUT,$/;"	e	enum:__anon3
XMPP_SE_HOST_GONE	src/xmpp.h	/^    XMPP_SE_HOST_GONE,$/;"	e	enum:__anon3
XMPP_SE_HOST_UNKNOWN	src/xmpp.h	/^    XMPP_SE_HOST_UNKNOWN,$/;"	e	enum:__anon3
XMPP_SE_IMPROPER_ADDR	src/xmpp.h	/^    XMPP_SE_IMPROPER_ADDR,$/;"	e	enum:__anon3
XMPP_SE_INTERNAL_SERVER_ERROR	src/xmpp.h	/^    XMPP_SE_INTERNAL_SERVER_ERROR,$/;"	e	enum:__anon3
XMPP_SE_INVALID_FROM	src/xmpp.h	/^    XMPP_SE_INVALID_FROM,$/;"	e	enum:__anon3
XMPP_SE_INVALID_ID	src/xmpp.h	/^    XMPP_SE_INVALID_ID,$/;"	e	enum:__anon3
XMPP_SE_INVALID_NS	src/xmpp.h	/^    XMPP_SE_INVALID_NS,$/;"	e	enum:__anon3
XMPP_SE_INVALID_XML	src/xmpp.h	/^    XMPP_SE_INVALID_XML,$/;"	e	enum:__anon3
XMPP_SE_NOT_AUTHORIZED	src/xmpp.h	/^    XMPP_SE_NOT_AUTHORIZED,$/;"	e	enum:__anon3
XMPP_SE_POLICY_VIOLATION	src/xmpp.h	/^    XMPP_SE_POLICY_VIOLATION,$/;"	e	enum:__anon3
XMPP_SE_REMOTE_CONN_FAILED	src/xmpp.h	/^    XMPP_SE_REMOTE_CONN_FAILED,$/;"	e	enum:__anon3
XMPP_SE_RESOURCE_CONSTRAINT	src/xmpp.h	/^    XMPP_SE_RESOURCE_CONSTRAINT,$/;"	e	enum:__anon3
XMPP_SE_RESTRICTED_XML	src/xmpp.h	/^    XMPP_SE_RESTRICTED_XML,$/;"	e	enum:__anon3
XMPP_SE_SEE_OTHER_HOST	src/xmpp.h	/^    XMPP_SE_SEE_OTHER_HOST,$/;"	e	enum:__anon3
XMPP_SE_SYSTEM_SHUTDOWN	src/xmpp.h	/^    XMPP_SE_SYSTEM_SHUTDOWN,$/;"	e	enum:__anon3
XMPP_SE_UNDEFINED_CONDITION	src/xmpp.h	/^    XMPP_SE_UNDEFINED_CONDITION,$/;"	e	enum:__anon3
XMPP_SE_UNSUPPORTED_ENCODING	src/xmpp.h	/^    XMPP_SE_UNSUPPORTED_ENCODING,$/;"	e	enum:__anon3
XMPP_SE_UNSUPPORTED_STANZA_TYPE	src/xmpp.h	/^    XMPP_SE_UNSUPPORTED_STANZA_TYPE,$/;"	e	enum:__anon3
XMPP_SE_UNSUPPORTED_VERSION	src/xmpp.h	/^    XMPP_SE_UNSUPPORTED_VERSION,$/;"	e	enum:__anon3
XMPP_SE_XML_NOT_WELL_FORMED	src/xmpp.h	/^    XMPP_SE_XML_NOT_WELL_FORMED$/;"	e	enum:__anon3
XMPP_STANZA_TAG	src/stanza.h	/^    XMPP_STANZA_TAG$/;"	e	enum:__anon2
XMPP_STANZA_TEXT	src/stanza.h	/^    XMPP_STANZA_TEXT,$/;"	e	enum:__anon2
XMPP_STANZA_UNKNOWN	src/stanza.h	/^    XMPP_STANZA_UNKNOWN,$/;"	e	enum:__anon2
XMPP_STREAM_CONNECTED	src/xmpp.h	/^    XMPP_STREAM_CONNECTED$/;"	e	enum:__anon4
XMPP_STREAM_CONNECTING	src/xmpp.h	/^    XMPP_STREAM_CONNECTING,$/;"	e	enum:__anon4
XMPP_STREAM_DISCONNECTED	src/xmpp.h	/^    XMPP_STREAM_DISCONNECTED,$/;"	e	enum:__anon4
XMPP_STREAM_SASL_AUTHED	src/xmpp.h	/^    XMPP_STREAM_SASL_AUTHED,$/;"	e	enum:__anon4
XMPP_STREAM_SASL_AUTHENTICATING	src/xmpp.h	/^    XMPP_STREAM_SASL_AUTHENTICATING,$/;"	e	enum:__anon4
XMPP_STREAM_TLS_NEGOTIATING	src/xmpp.h	/^    XMPP_STREAM_TLS_NEGOTIATING,$/;"	e	enum:__anon4
XMPP_STREAM_TSL_OPENED	src/xmpp.h	/^    XMPP_STREAM_TSL_OPENED,$/;"	e	enum:__anon4
XmppErrorType	src/xmpp.h	/^} XmppErrorType;$/;"	t	typeref:enum:__anon3
XmppStanza	src/stanza.h	/^} XmppStanza;$/;"	t	typeref:struct:_XmppStanza
XmppStanzaType	src/stanza.h	/^} XmppStanzaType;$/;"	t	typeref:enum:__anon2
XmppStream	src/xmpp.h	/^typedef struct _XmppStream XmppStream;$/;"	t	typeref:struct:_XmppStream
XmppStreamError	src/xmpp.h	/^typedef struct _XmppStreamError XmppStreamError;$/;"	t	typeref:struct:_XmppStreamError
XmppStreamState	src/xmpp.h	/^} XmppStreamState;$/;"	t	typeref:enum:__anon4
_BSD_SOURCE	src/fmacros.h	/^#define _BSD_SOURCE$/;"	d
_Command	src/smarta.h	/^typedef struct _Command {$/;"	s
_POSIX_C_SOURCE	src/fmacros.h	/^#define _POSIX_C_SOURCE /;"	d
_Parser	src/parser.h	/^typedef struct _Parser {$/;"	s
_SMARTA_HASH_H_	src/hash.h	/^#define _SMARTA_HASH_H_$/;"	d
_SMARTA_H_	src/smarta.h	/^#define _SMARTA_H_$/;"	d
_SMARTA_PARSER_H_	src/parser.h	/^#define _SMARTA_PARSER_H_$/;"	d
_SMARTA_SASL_H__	src/sasl.h	/^#define _SMARTA_SASL_H__$/;"	d
_SMARTA_STANZA_H_	src/stanza.h	/^#define _SMARTA_STANZA_H_$/;"	d
_SMARTA_XMPP_H__	src/xmpp.h	/^#define _SMARTA_XMPP_H__$/;"	d
_Service	src/smarta.h	/^typedef struct _Service {$/;"	s
_Smarta	src/smarta.h	/^typedef struct _Smarta {$/;"	s
_XOPEN_SOURCE	src/fmacros.h	/^#define _XOPEN_SOURCE /;"	d
_XOPEN_SOURCE	src/fmacros.h	/^#define _XOPEN_SOURCE$/;"	d
_XmppStanza	src/stanza.h	/^typedef struct _XmppStanza {$/;"	s
_XmppStream	src/xmpp.h	/^struct _XmppStream {$/;"	s
_XmppStreamError	src/xmpp.h	/^struct _XmppStreamError {$/;"	s
__ADLIST_H__	src/adlist.h	/^#define __ADLIST_H__$/;"	d
__AE_H__	src/ae.h	/^#define __AE_H__$/;"	d
__CONFIG_H	src/config.h	/^#define __CONFIG_H$/;"	d
__DICT_H	src/dict.h	/^#define __DICT_H$/;"	d
__HIREDIS_FMACRO_H	src/fmacros.h	/^#define __HIREDIS_FMACRO_H$/;"	d
__SDS_H	src/sds.h	/^#define __SDS_H$/;"	d
__SHA1_H	src/sha1.h	/^#define __SHA1_H$/;"	d
__SMARTA_SCHED_H__	src/sched.h	/^#define __SMARTA_SCHED_H__$/;"	d
__failed_tests	src/sds.c	/^int __failed_tests = 0;$/;"	v
__test_num	src/sds.c	/^int __test_num = 0;$/;"	v
_add_key	src/sasl.c	/^static char *_add_key(hash_t *table, const char *key, $/;"	f	file:
_base64_charmap	src/sasl.c	/^static const char _base64_charmap[65] = {$/;"	v	file:
_base64_invcharmap	src/sasl.c	/^static const char _base64_invcharmap[256] = {$/;"	v	file:
_characters	src/parser.c	/^static void _characters(void *userdata, const XML_Char *s, int len) {$/;"	f	file:
_dictClear	src/dict.c	/^int _dictClear(dict *d, dictht *ht)$/;"	f
_dictExpandIfNeeded	src/dict.c	/^static int _dictExpandIfNeeded(dict *d)$/;"	f	file:
_dictInit	src/dict.c	/^int _dictInit(dict *d, dictType *type,$/;"	f
_dictKeyIndex	src/dict.c	/^static int _dictKeyIndex(dict *d, const void *key)$/;"	f	file:
_dictNextPower	src/dict.c	/^static unsigned long _dictNextPower(unsigned long size)$/;"	f	file:
_dictPrintStatsHt	src/dict.c	/^static void _dictPrintStatsHt(dictht *ht) {$/;"	f	file:
_dictRehashStep	src/dict.c	/^static void _dictRehashStep(dict *d) {$/;"	f	file:
_dictReset	src/dict.c	/^static void _dictReset(dictht *ht)$/;"	f	file:
_digest_to_hex	src/sasl.c	/^static void _digest_to_hex(const char *digest, char *hex) {$/;"	f	file:
_end_element	src/parser.c	/^static void _end_element(void *userdata, const XML_Char *name) {$/;"	f	file:
_get_stream_attribute	src/xmpp.c	/^static char *_get_stream_attribute(char **attrs, char *name) {$/;"	f	file:
_hash_iterator_t	src/hash.c	/^struct _hash_iterator_t {$/;"	s	file:
_hash_key	src/hash.c	/^static int _hash_key(hash_t *table, const char *key)$/;"	f	file:
_hash_t	src/hash.c	/^struct _hash_t {$/;"	s	file:
_hashentry_t	src/hash.c	/^struct _hashentry_t {$/;"	s	file:
_log_open_tag	src/xmpp.c	/^static void _log_open_tag(char **attrs) {$/;"	f	file:
_make_quoted	src/sasl.c	/^static char *_make_quoted(const char *s) {$/;"	f	file:
_make_sasl_auth	src/xmpp.c	/^static XmppStanza *_make_sasl_auth(const char *mechanism) {$/;"	f	file:
_make_starttls	src/xmpp.c	/^static XmppStanza *_make_starttls(XmppStream *stream) {$/;"	f	file:
_make_string	src/sasl.c	/^static char *_make_string(const char *s, const unsigned len) {$/;"	f	file:
_on_stream_end	src/xmpp.c	/^static void _on_stream_end(char *name, void * const userdata) {$/;"	f	file:
_on_stream_stanza	src/xmpp.c	/^static void _on_stream_stanza(XmppStanza * const stanza, void * const userdata) {$/;"	f	file:
_on_stream_start	src/xmpp.c	/^static void _on_stream_start(char *name, char **attrs, $/;"	f	file:
_parse_digest_challenge	src/sasl.c	/^static hash_t *_parse_digest_challenge(const char *msg)$/;"	f	file:
_render_stanza_recursive	src/stanza.c	/^static int _render_stanza_recursive(XmppStanza *stanza,$/;"	f	file:
_render_update	src/stanza.c	/^static inline void _render_update(int *written, const int length,$/;"	f	file:
_rfds	src/ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	file:
_set_attributes	src/parser.c	/^static void _set_attributes(XmppStanza *stanza, const XML_Char **attrs) {$/;"	f	file:
_snp_pow10	src/snprintf.c	/^static LDOUBLE _snp_pow10 (int exp)$/;"	f	file:
_snp_round	src/snprintf.c	/^static long _snp_round (LDOUBLE value)$/;"	f	file:
_start_element	src/parser.c	/^static void _start_element(void *userdata,$/;"	f	file:
_wfds	src/ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	file:
abs_val	src/snprintf.c	/^static LDOUBLE abs_val (LDOUBLE value)$/;"	f	file:
aeAddMillisecondsToNow	src/ae.c	/^static void aeAddMillisecondsToNow(long long milliseconds, long *sec, long *ms) {$/;"	f	file:
aeApiAddEvent	src/ae_epoll.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiAddEvent	src/ae_kqueue.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiAddEvent	src/ae_select.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiCreate	src/ae_epoll.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiCreate	src/ae_kqueue.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiCreate	src/ae_select.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiDelEvent	src/ae_epoll.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int delmask) {$/;"	f	file:
aeApiDelEvent	src/ae_kqueue.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiDelEvent	src/ae_select.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiFree	src/ae_epoll.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiFree	src/ae_kqueue.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiFree	src/ae_select.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiName	src/ae_epoll.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiName	src/ae_kqueue.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiName	src/ae_select.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiPoll	src/ae_epoll.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiPoll	src/ae_kqueue.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiPoll	src/ae_select.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiState	src/ae_epoll.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	src/ae_epoll.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	src/ae_kqueue.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	src/ae_kqueue.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeApiState	src/ae_select.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	src/ae_select.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
aeBeforeSleepProc	src/ae.h	/^typedef void aeBeforeSleepProc(struct aeEventLoop *eventLoop);$/;"	t
aeCreateEventLoop	src/ae.c	/^aeEventLoop *aeCreateEventLoop(void) {$/;"	f
aeCreateFileEvent	src/ae.c	/^int aeCreateFileEvent(aeEventLoop *eventLoop, int fd, int mask,$/;"	f
aeCreateTimeEvent	src/ae.c	/^long long aeCreateTimeEvent(aeEventLoop *eventLoop, long long milliseconds,$/;"	f
aeDeleteEventLoop	src/ae.c	/^void aeDeleteEventLoop(aeEventLoop *eventLoop) {$/;"	f
aeDeleteFileEvent	src/ae.c	/^void aeDeleteFileEvent(aeEventLoop *eventLoop, int fd, int mask)$/;"	f
aeDeleteTimeEvent	src/ae.c	/^int aeDeleteTimeEvent(aeEventLoop *eventLoop, long long id)$/;"	f
aeEventFinalizerProc	src/ae.h	/^typedef void aeEventFinalizerProc(struct aeEventLoop *eventLoop, void *clientData);$/;"	t
aeEventLoop	src/ae.h	/^typedef struct aeEventLoop {$/;"	s
aeEventLoop	src/ae.h	/^} aeEventLoop;$/;"	t	typeref:struct:aeEventLoop
aeFileEvent	src/ae.h	/^typedef struct aeFileEvent {$/;"	s
aeFileEvent	src/ae.h	/^} aeFileEvent;$/;"	t	typeref:struct:aeFileEvent
aeFileProc	src/ae.h	/^typedef void aeFileProc(struct aeEventLoop *eventLoop, int fd, void *clientData, int mask);$/;"	t
aeFiredEvent	src/ae.h	/^typedef struct aeFiredEvent {$/;"	s
aeFiredEvent	src/ae.h	/^} aeFiredEvent;$/;"	t	typeref:struct:aeFiredEvent
aeGetApiName	src/ae.c	/^char *aeGetApiName(void) {$/;"	f
aeGetTime	src/ae.c	/^static void aeGetTime(long *seconds, long *milliseconds)$/;"	f	file:
aeMain	src/ae.c	/^void aeMain(aeEventLoop *eventLoop) {$/;"	f
aeProcessEvents	src/ae.c	/^int aeProcessEvents(aeEventLoop *eventLoop, int flags)$/;"	f
aeSearchNearestTimer	src/ae.c	/^static aeTimeEvent *aeSearchNearestTimer(aeEventLoop *eventLoop)$/;"	f	file:
aeSetBeforeSleepProc	src/ae.c	/^void aeSetBeforeSleepProc(aeEventLoop *eventLoop, aeBeforeSleepProc *beforesleep) {$/;"	f
aeStop	src/ae.c	/^void aeStop(aeEventLoop *eventLoop) {$/;"	f
aeTimeEvent	src/ae.h	/^typedef struct aeTimeEvent {$/;"	s
aeTimeEvent	src/ae.h	/^} aeTimeEvent;$/;"	t	typeref:struct:aeTimeEvent
aeTimeProc	src/ae.h	/^typedef int aeTimeProc(struct aeEventLoop *eventLoop, long long id, void *clientData);$/;"	t
aeWait	src/ae.c	/^int aeWait(int fd, int mask, long long milliseconds) {$/;"	f
anetCreateSocket	src/anet.c	/^static int anetCreateSocket(char *err, int domain) {$/;"	f	file:
anetGenericAccept	src/anet.c	/^static int anetGenericAccept(char *err, int s, struct sockaddr *sa, socklen_t *len) {$/;"	f	file:
anetListen	src/anet.c	/^static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len) {$/;"	f	file:
anetNonBlock	src/anet.c	/^int anetNonBlock(char *err, int fd)$/;"	f
anetPeerToString	src/anet.c	/^int anetPeerToString(int fd, char *ip, int *port) {$/;"	f
anetRead	src/anet.c	/^int anetRead(int fd, char *buf, int count)$/;"	f
anetResolve	src/anet.c	/^int anetResolve(char *err, char *host, char *ipbuf)$/;"	f
anetSetError	src/anet.c	/^static void anetSetError(char *err, const char *fmt, ...)$/;"	f	file:
anetSetSendBuffer	src/anet.c	/^int anetSetSendBuffer(char *err, int fd, int buffsize)$/;"	f
anetTcpAccept	src/anet.c	/^int anetTcpAccept(char *err, int s, char *ip, int *port) {$/;"	f
anetTcpConnect	src/anet.c	/^int anetTcpConnect(char *err, char *addr, int port)$/;"	f
anetTcpGenericConnect	src/anet.c	/^static int anetTcpGenericConnect(char *err, char *addr, int port, int flags)$/;"	f	file:
anetTcpKeepAlive	src/anet.c	/^int anetTcpKeepAlive(char *err, int fd)$/;"	f
anetTcpNoDelay	src/anet.c	/^int anetTcpNoDelay(char *err, int fd)$/;"	f
anetTcpNonBlockConnect	src/anet.c	/^int anetTcpNonBlockConnect(char *err, char *addr, int port)$/;"	f
anetTcpServer	src/anet.c	/^int anetTcpServer(char *err, int port, char *bindaddr)$/;"	f
anetUnixAccept	src/anet.c	/^int anetUnixAccept(char *err, int s) {$/;"	f
anetUnixConnect	src/anet.c	/^int anetUnixConnect(char *err, char *path)$/;"	f
anetUnixGenericConnect	src/anet.c	/^int anetUnixGenericConnect(char *err, char *path, int flags)$/;"	f
anetUnixNonBlockConnect	src/anet.c	/^int anetUnixNonBlockConnect(char *err, char *path)$/;"	f
anetUnixServer	src/anet.c	/^int anetUnixServer(char *err, char *path, mode_t perm)$/;"	f
anetWrite	src/anet.c	/^int anetWrite(int fd, char *buf, int count)$/;"	f
aof_fsync	src/config.h	/^#define aof_fsync /;"	d
apidata	src/ae.h	/^    void *apidata; \/* This is used for polling API specific data *\/$/;"	m	struct:aeEventLoop
apikey	src/smarta.h	/^    char *apikey;$/;"	m	struct:_Smarta
attributes	src/stanza.h	/^    hash_t *attributes;$/;"	m	struct:_XmppStanza
authenticated	src/xmpp.h	/^    int authenticated;$/;"	m	struct:_XmppStream
base64_decode	src/sasl.c	/^unsigned char *base64_decode(const char * const buffer, const unsigned len) {$/;"	f
base64_decoded_len	src/sasl.c	/^int base64_decoded_len(const char * const buffer, const unsigned len) {$/;"	f
base64_encode	src/sasl.c	/^char *base64_encode(const unsigned char * const buffer, const unsigned len) {$/;"	f
base64_encoded_len	src/sasl.c	/^int base64_encoded_len(const unsigned len) {$/;"	f
before_sleep	src/smarta.c	/^static void before_sleep(struct aeEventLoop *eventLoop) {$/;"	f	file:
beforesleep	src/ae.h	/^    aeBeforeSleepProc *beforesleep;$/;"	m	struct:aeEventLoop
bits	src/md5.h	/^	uint32_t bits[2];$/;"	m	struct:MD5Context
blk	src/sha1.c	/^#define blk(/;"	d	file:
blk0	src/sha1.c	/^#define blk0(/;"	d	file:
bound_jid	src/xmpp.h	/^    char *bound_jid;$/;"	m	struct:_XmppStream
buf	src/md5.h	/^	uint32_t buf[4];$/;"	m	struct:MD5Context
buf	src/sds.h	/^    char buf[];$/;"	m	struct:sdshdr
buffer	src/sha1.h	/^    uint8_t  buffer[64];$/;"	m	struct:__anon1
char_to_int	src/snprintf.c	/^#define char_to_int(/;"	d	file:
check_service	src/sched.c	/^int check_service(struct aeEventLoop *el, long long id, void *clientdata) {$/;"	f
children	src/stanza.h	/^    struct _XmppStanza *children;$/;"	m	struct:_XmppStanza	typeref:struct:_XmppStanza::_XmppStanza
clientData	src/ae.h	/^    void *clientData;$/;"	m	struct:aeFileEvent
clientData	src/ae.h	/^    void *clientData;$/;"	m	struct:aeTimeEvent
command	src/smarta.h	/^    char *command;$/;"	m	struct:_Service
connect_timeout	src/xmpp.h	/^    unsigned int connect_timeout;$/;"	m	struct:_XmppStream
connectdomain	src/xmpp.h	/^    char *connectdomain;$/;"	m	struct:_XmppStream
connectport	src/xmpp.h	/^    char *connectport;$/;"	m	struct:_XmppStream
count	src/sha1.h	/^    uint32_t count[2];$/;"	m	struct:__anon1
d	src/dict.h	/^    dict *d;$/;"	m	struct:dictIterator
daemonize	src/smarta.h	/^    int daemonize;$/;"	m	struct:_Smarta
data	src/stanza.h	/^    char *data;$/;"	m	struct:_XmppStanza
depth	src/parser.h	/^    int depth;$/;"	m	struct:_Parser
dict	src/dict.h	/^typedef struct dict {$/;"	s
dict	src/dict.h	/^} dict;$/;"	t	typeref:struct:dict
dictAdd	src/dict.c	/^int dictAdd(dict *d, void *key, void *val)$/;"	f
dictCompareHashKeys	src/dict.h	/^#define dictCompareHashKeys(/;"	d
dictCreate	src/dict.c	/^dict *dictCreate(dictType *type,$/;"	f
dictDelete	src/dict.c	/^int dictDelete(dict *ht, const void *key) {$/;"	f
dictDeleteNoFree	src/dict.c	/^int dictDeleteNoFree(dict *ht, const void *key) {$/;"	f
dictDisableResize	src/dict.c	/^void dictDisableResize(void) {$/;"	f
dictEmpty	src/dict.c	/^void dictEmpty(dict *d) {$/;"	f
dictEnableResize	src/dict.c	/^void dictEnableResize(void) {$/;"	f
dictEntry	src/dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	src/dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictExpand	src/dict.c	/^int dictExpand(dict *d, unsigned long size)$/;"	f
dictFetchValue	src/dict.c	/^void *dictFetchValue(dict *d, const void *key) {$/;"	f
dictFind	src/dict.c	/^dictEntry *dictFind(dict *d, const void *key)$/;"	f
dictFreeEntryKey	src/dict.h	/^#define dictFreeEntryKey(/;"	d
dictFreeEntryVal	src/dict.h	/^#define dictFreeEntryVal(/;"	d
dictGenCaseHashFunction	src/dict.c	/^unsigned int dictGenCaseHashFunction(const unsigned char *buf, int len) {$/;"	f
dictGenHashFunction	src/dict.c	/^unsigned int dictGenHashFunction(const unsigned char *buf, int len) {$/;"	f
dictGenericDelete	src/dict.c	/^static int dictGenericDelete(dict *d, const void *key, int nofree)$/;"	f	file:
dictGetEntryKey	src/dict.h	/^#define dictGetEntryKey(/;"	d
dictGetEntryVal	src/dict.h	/^#define dictGetEntryVal(/;"	d
dictGetIterator	src/dict.c	/^dictIterator *dictGetIterator(dict *d)$/;"	f
dictGetRandomKey	src/dict.c	/^dictEntry *dictGetRandomKey(dict *d)$/;"	f
dictGetSafeIterator	src/dict.c	/^dictIterator *dictGetSafeIterator(dict *d) {$/;"	f
dictHashKey	src/dict.h	/^#define dictHashKey(/;"	d
dictIdentityHashFunction	src/dict.c	/^unsigned int dictIdentityHashFunction(unsigned int key)$/;"	f
dictIntHashFunction	src/dict.c	/^unsigned int dictIntHashFunction(unsigned int key)$/;"	f
dictIsRehashing	src/dict.h	/^#define dictIsRehashing(/;"	d
dictIterator	src/dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	src/dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictNext	src/dict.c	/^dictEntry *dictNext(dictIterator *iter)$/;"	f
dictPrintStats	src/dict.c	/^void dictPrintStats(dict *d) {$/;"	f
dictRehash	src/dict.c	/^int dictRehash(dict *d, int n) {$/;"	f
dictRehashMilliseconds	src/dict.c	/^int dictRehashMilliseconds(dict *d, int ms) {$/;"	f
dictRelease	src/dict.c	/^void dictRelease(dict *d)$/;"	f
dictReleaseIterator	src/dict.c	/^void dictReleaseIterator(dictIterator *iter)$/;"	f
dictReplace	src/dict.c	/^int dictReplace(dict *d, void *key, void *val)$/;"	f
dictResize	src/dict.c	/^int dictResize(dict *d)$/;"	f
dictSetHashKey	src/dict.h	/^#define dictSetHashKey(/;"	d
dictSetHashVal	src/dict.h	/^#define dictSetHashVal(/;"	d
dictSize	src/dict.h	/^#define dictSize(/;"	d
dictSlots	src/dict.h	/^#define dictSlots(/;"	d
dictType	src/dict.h	/^typedef struct dictType {$/;"	s
dictType	src/dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dict_can_resize	src/dict.c	/^static int dict_can_resize = 1;$/;"	v	file:
dict_force_resize_ratio	src/dict.c	/^static unsigned int dict_force_resize_ratio = 5;$/;"	v	file:
dictht	src/dict.h	/^typedef struct dictht {$/;"	s
dictht	src/dict.h	/^} dictht;$/;"	t	typeref:struct:dictht
digest_to_hex	src/sha1.c	/^void digest_to_hex(const uint8_t digest[SHA1_DIGEST_SIZE], char *output) {$/;"	f
direction	src/adlist.h	/^    int direction;$/;"	m	struct:listIter
domain	src/xmpp.h	/^    char *domain;$/;"	m	struct:_XmppStream
dopr	src/snprintf.c	/^static int dopr (char *buffer, size_t maxlen, const char *format, va_list args)$/;"	f	file:
dopr_outch	src/snprintf.c	/^static int dopr_outch (char *buffer, size_t *currlen, size_t maxlen, char c)$/;"	f	file:
dup	src/adlist.h	/^    void *(*dup)(void *ptr);$/;"	m	struct:list
el	src/smarta.h	/^    aeEventLoop *el;$/;"	m	struct:_Smarta
endcb	src/parser.h	/^    parser_end_callback endcb;$/;"	m	struct:_Parser
entries	src/hash.c	/^    hashentry_t **entries;$/;"	m	struct:_hash_t	file:
entry	src/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
entry	src/hash.c	/^    hashentry_t *entry;$/;"	m	struct:_hash_iterator_t	file:
epfd	src/ae_epoll.c	/^    int epfd;$/;"	m	struct:aeApiState	file:
error	src/xmpp.h	/^    int error;$/;"	m	struct:_XmppStream
events	src/ae.h	/^    aeFileEvent events[AE_SETSIZE]; \/* Registered events *\/$/;"	m	struct:aeEventLoop
events	src/ae_epoll.c	/^    struct epoll_event events[AE_SETSIZE];$/;"	m	struct:aeApiState	typeref:struct:aeApiState::epoll_event	file:
events	src/ae_kqueue.c	/^    struct kevent events[AE_SETSIZE];$/;"	m	struct:aeApiState	typeref:struct:aeApiState::kevent	file:
expat	src/parser.h	/^    XML_Parser expat;$/;"	m	struct:_Parser
fd	src/ae.h	/^    int fd;$/;"	m	struct:aeFiredEvent
fd	src/xmpp.h	/^    int fd; \/\/socket$/;"	m	struct:_XmppStream
finalizerProc	src/ae.h	/^    aeEventFinalizerProc *finalizerProc;$/;"	m	struct:aeTimeEvent
fired	src/ae.h	/^    aeFiredEvent fired[AE_SETSIZE]; \/* Fired events *\/$/;"	m	struct:aeEventLoop
fmtfp	src/snprintf.c	/^static int fmtfp (char *buffer, size_t *currlen, size_t maxlen,$/;"	f	file:
fmtint	src/snprintf.c	/^static int fmtint (char *buffer, size_t *currlen, size_t maxlen,$/;"	f	file:
fmtstr	src/snprintf.c	/^static int fmtstr (char *buffer, size_t *currlen, size_t maxlen,$/;"	f	file:
free	src/adlist.h	/^    void (*free)(void *ptr);$/;"	m	struct:list
free	src/hash.c	/^    hash_free_func free;$/;"	m	struct:_hash_t	file:
free	src/sds.h	/^    int free;$/;"	m	struct:sdshdr
hashFunction	src/dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType
hash_add	src/hash.c	/^int hash_add(hash_t *table, const char * const key, void *data)$/;"	f
hash_clone	src/hash.c	/^hash_t *hash_clone(hash_t * const table)$/;"	f
hash_drop	src/hash.c	/^int hash_drop(hash_t *table, const char *key)$/;"	f
hash_free_func	src/hash.h	/^typedef void (*hash_free_func)(void *p);$/;"	t
hash_get	src/hash.c	/^void *hash_get(hash_t *table, const char *key)$/;"	f
hash_iter_new	src/hash.c	/^hash_iterator_t *hash_iter_new(hash_t *table)$/;"	f
hash_iter_next	src/hash.c	/^const char * hash_iter_next(hash_iterator_t *iter)$/;"	f
hash_iter_release	src/hash.c	/^void hash_iter_release(hash_iterator_t *iter)$/;"	f
hash_iterator_t	src/hash.h	/^typedef struct _hash_iterator_t hash_iterator_t;$/;"	t	typeref:struct:_hash_iterator_t
hash_new	src/hash.c	/^hash_t *hash_new(const int size, hash_free_func free)$/;"	f
hash_num_keys	src/hash.c	/^int hash_num_keys(hash_t *table)$/;"	f
hash_release	src/hash.c	/^void hash_release(hash_t * const table)$/;"	f
hash_t	src/hash.h	/^typedef struct _hash_t hash_t;$/;"	t	typeref:struct:_hash_t
hashentry_t	src/hash.c	/^typedef struct _hashentry_t hashentry_t;$/;"	t	typeref:struct:_hashentry_t	file:
head	src/adlist.h	/^    listNode *head;$/;"	m	struct:list
ht	src/dict.h	/^    dictht ht[2];$/;"	m	struct:dict
id	src/ae.h	/^    long long id; \/* time event identifier. *\/$/;"	m	struct:aeTimeEvent
in	src/md5.h	/^	unsigned char in[64];$/;"	m	struct:MD5Context
index	src/dict.h	/^    int table, index, safe;$/;"	m	struct:dictIterator
index	src/hash.c	/^    int index;$/;"	m	struct:_hash_iterator_t	file:
int16_t	src/sasl.c	/^  typedef short int               int16_t;$/;"	t	file:
int16_t	src/sha1.c	/^  typedef short int               int16_t;$/;"	t	file:
int32_t	src/sasl.c	/^  typedef int                     int32_t;$/;"	t	file:
int32_t	src/sha1.c	/^  typedef int                     int32_t;$/;"	t	file:
int64_t	src/sasl.c	/^  typedef __int64                 int64_t;$/;"	t	file:
int64_t	src/sha1.c	/^  typedef __int64                 int64_t;$/;"	t	file:
int8_t	src/sasl.c	/^  typedef signed char             int8_t;$/;"	t	file:
int8_t	src/sha1.c	/^  typedef signed char             int8_t;$/;"	t	file:
iq_callbacks	src/xmpp.h	/^    dict *iq_callbacks;$/;"	m	struct:_XmppStream
isslave	src/smarta.h	/^    int isslave;$/;"	m	struct:_Smarta
iterators	src/dict.h	/^    int iterators; \/* number of iterators currently running *\/$/;"	m	struct:dict
jid	src/xmpp.h	/^    char *jid;$/;"	m	struct:_XmppStream
key	src/dict.h	/^    void *key;$/;"	m	struct:dictEntry
key	src/hash.c	/^    char *key;$/;"	m	struct:_hashentry_t	file:
keyCompare	src/dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyDestructor	src/dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDup	src/dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
kqfd	src/ae_kqueue.c	/^    int kqfd;$/;"	m	struct:aeApiState	file:
len	src/adlist.h	/^    unsigned int len;$/;"	m	struct:list
len	src/sds.h	/^    int len;$/;"	m	struct:sdshdr
length	src/hash.c	/^    int length;$/;"	m	struct:_hash_t	file:
list	src/adlist.h	/^typedef struct list {$/;"	s
list	src/adlist.h	/^} list;$/;"	t	typeref:struct:list
listAddNodeHead	src/adlist.c	/^list *listAddNodeHead(list *list, void *value)$/;"	f
listAddNodeTail	src/adlist.c	/^list *listAddNodeTail(list *list, void *value)$/;"	f
listCreate	src/adlist.c	/^list *listCreate(void)$/;"	f
listDelNode	src/adlist.c	/^void listDelNode(list *list, listNode *node)$/;"	f
listDup	src/adlist.c	/^list *listDup(list *orig)$/;"	f
listFirst	src/adlist.h	/^#define listFirst(/;"	d
listGetDupMethod	src/adlist.h	/^#define listGetDupMethod(/;"	d
listGetFree	src/adlist.h	/^#define listGetFree(/;"	d
listGetIterator	src/adlist.c	/^listIter *listGetIterator(list *list, int direction)$/;"	f
listGetMatchMethod	src/adlist.h	/^#define listGetMatchMethod(/;"	d
listIndex	src/adlist.c	/^listNode *listIndex(list *list, int index) {$/;"	f
listInsertNode	src/adlist.c	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after) {$/;"	f
listIter	src/adlist.h	/^typedef struct listIter {$/;"	s
listIter	src/adlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listLast	src/adlist.h	/^#define listLast(/;"	d
listLength	src/adlist.h	/^#define listLength(/;"	d
listNext	src/adlist.c	/^listNode *listNext(listIter *iter)$/;"	f
listNextNode	src/adlist.h	/^#define listNextNode(/;"	d
listNode	src/adlist.h	/^typedef struct listNode {$/;"	s
listNode	src/adlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNodeValue	src/adlist.h	/^#define listNodeValue(/;"	d
listPrevNode	src/adlist.h	/^#define listPrevNode(/;"	d
listRelease	src/adlist.c	/^void listRelease(list *list)$/;"	f
listReleaseIterator	src/adlist.c	/^void listReleaseIterator(listIter *iter) {$/;"	f
listRewind	src/adlist.c	/^void listRewind(list *list, listIter *li) {$/;"	f
listRewindTail	src/adlist.c	/^void listRewindTail(list *list, listIter *li) {$/;"	f
listSearchKey	src/adlist.c	/^listNode *listSearchKey(list *list, void *key)$/;"	f
listSetDupMethod	src/adlist.h	/^#define listSetDupMethod(/;"	d
listSetFreeMethod	src/adlist.h	/^#define listSetFreeMethod(/;"	d
listSetMatchMethod	src/adlist.h	/^#define listSetMatchMethod(/;"	d
load_config	src/smarta.c	/^void load_config(char *filename) {$/;"	f
logfile	src/smarta.h	/^    char *logfile;$/;"	m	struct:_Smarta
main	src/sds.c	/^int main(void) {$/;"	f
main	src/sha1.c	/^int main(int argc, char** argv) {$/;"	f
main	src/smarta.c	/^int main(int argc, char **argv) {$/;"	f
main	src/snprintf.c	/^int main (void)$/;"	f
mask	src/ae.h	/^    int mask; \/* one of AE_(READABLE|WRITABLE) *\/$/;"	m	struct:aeFileEvent
mask	src/ae.h	/^    int mask;$/;"	m	struct:aeFiredEvent
masterauth	src/smarta.h	/^    char *masterauth;$/;"	m	struct:_Smarta
masterhost	src/smarta.h	/^    char *masterhost;$/;"	m	struct:_Smarta
masterport	src/smarta.h	/^    int masterport;$/;"	m	struct:_Smarta
match	src/adlist.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list
maxfd	src/ae.h	/^    int maxfd;$/;"	m	struct:aeEventLoop
name	src/smarta.h	/^    char *name;$/;"	m	struct:_Command
name	src/smarta.h	/^    char *name;$/;"	m	struct:_Service
name	src/smarta.h	/^    char *name;$/;"	m	struct:_Smarta
next	src/adlist.h	/^    listNode *next;$/;"	m	struct:listIter
next	src/adlist.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
next	src/ae.h	/^    struct aeTimeEvent *next;$/;"	m	struct:aeTimeEvent	typeref:struct:aeTimeEvent::aeTimeEvent
next	src/dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
next	src/hash.c	/^    hashentry_t *next;$/;"	m	struct:_hashentry_t	file:
next	src/stanza.h	/^    struct _XmppStanza *next;$/;"	m	struct:_XmppStanza	typeref:struct:_XmppStanza::_XmppStanza
nextEntry	src/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
num_keys	src/hash.c	/^    int num_keys;$/;"	m	struct:_hash_t	file:
parent	src/stanza.h	/^    struct _XmppStanza *parent;$/;"	m	struct:_XmppStanza	typeref:struct:_XmppStanza::_XmppStanza
parser	src/xmpp.h	/^    Parser *parser;$/;"	m	struct:_XmppStream
parser_end_callback	src/parser.h	/^typedef void (*parser_end_callback)(char *name, void * const userdata);$/;"	t
parser_feed	src/parser.c	/^int parser_feed(Parser *parser, char *chunk, int len) {$/;"	f
parser_free	src/parser.c	/^void parser_free(Parser *parser) {$/;"	f
parser_new	src/parser.c	/^Parser *parser_new(parser_start_callback startcb,$/;"	f
parser_reset	src/parser.c	/^int parser_reset(Parser *parser) {$/;"	f
parser_stanza_callback	src/parser.h	/^typedef void (*parser_stanza_callback)($/;"	t
parser_start_callback	src/parser.h	/^typedef void (*parser_start_callback)(char *name,$/;"	t
pass	src/xmpp.h	/^    char *pass;$/;"	m	struct:_XmppStream
period	src/smarta.h	/^    long period;$/;"	m	struct:_Service
pidfile	src/smarta.h	/^    char *pidfile;$/;"	m	struct:_Smarta
prev	src/adlist.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
prev	src/stanza.h	/^    struct _XmppStanza *prev;$/;"	m	struct:_XmppStanza	typeref:struct:_XmppStanza::_XmppStanza
privdata	src/dict.h	/^    void *privdata;$/;"	m	struct:dict
processTimeEvents	src/ae.c	/^static int processTimeEvents(aeEventLoop *eventLoop) {$/;"	f	file:
redis_fstat	src/config.h	/^#define redis_fstat /;"	d
redis_stat	src/config.h	/^#define redis_stat /;"	d
ref	src/hash.c	/^    unsigned int ref;$/;"	m	struct:_hash_iterator_t	file:
ref	src/hash.c	/^    unsigned int ref;$/;"	m	struct:_hash_t	file:
ref	src/stanza.h	/^    int ref;$/;"	m	struct:_XmppStanza
rehashidx	src/dict.h	/^    int rehashidx; \/* rehashing not in progress if rehashidx == -1 *\/$/;"	m	struct:dict
rfds	src/ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	file:
rfileProc	src/ae.h	/^    aeFileProc *rfileProc;$/;"	m	struct:aeFileEvent
rol	src/sha1.c	/^#define rol(/;"	d	file:
safe	src/dict.h	/^    int table, index, safe;$/;"	m	struct:dictIterator
sasl_digest_md5	src/sasl.c	/^char *sasl_digest_md5(const char *challenge,$/;"	f
sasl_plain	src/sasl.c	/^char *sasl_plain(const char *authid, const char *password) {$/;"	f
sasl_support	src/xmpp.h	/^    int sasl_support; \/* if true, field is a bitfield of supported mechanisms *\/ $/;"	m	struct:_XmppStream
sched_run	src/sched.c	/^void sched_run() {$/;"	f
sds	src/sds.h	/^typedef char *sds;$/;"	t
sdsMakeRoomFor	src/sds.c	/^static sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f	file:
sdsOomAbort	src/sds.c	/^static void sdsOomAbort(void) {$/;"	f	file:
sdsavail	src/sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdscat	src/sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscatlen	src/sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatprintf	src/sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	src/sds.c	/^sds sdscatrepr(sds s, char *p, size_t len) {$/;"	f
sdscatvprintf	src/sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdscmp	src/sds.c	/^int sdscmp(sds s1, sds s2) {$/;"	f
sdscpy	src/sds.c	/^sds sdscpy(sds s, char *t) {$/;"	f
sdscpylen	src/sds.c	/^sds sdscpylen(sds s, char *t, size_t len) {$/;"	f
sdsdup	src/sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	src/sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	src/sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	src/sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	src/sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	src/sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdshdr	src/sds.h	/^struct sdshdr {$/;"	s
sdslen	src/sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdsnew	src/sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	src/sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	src/sds.c	/^sds sdsrange(sds s, int start, int end) {$/;"	f
sdssplitargs	src/sds.c	/^sds *sdssplitargs(char *line, int *argc) {$/;"	f
sdssplitlen	src/sds.c	/^sds *sdssplitlen(char *s, int len, char *sep, int seplen, int *count) {$/;"	f
sdstolower	src/sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	src/sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	src/sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdsupdatelen	src/sds.c	/^void sdsupdatelen(sds s) {$/;"	f
send_message	src/sched.c	/^void send_message(XmppStream *stream, sds result) {$/;"	f
server	src/smarta.h	/^    char *server;$/;"	m	struct:_Smarta
services	src/smarta.h	/^    list *services;$/;"	m	struct:_Smarta
size	src/dict.h	/^    unsigned long size;$/;"	m	struct:dictht
sizemask	src/dict.h	/^    unsigned long sizemask;$/;"	m	struct:dictht
smarta	src/smarta.c	/^Smarta smarta;$/;"	v
smarta_cron	src/smarta.c	/^static int smarta_cron(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f	file:
smarta_init	src/smarta.c	/^void smarta_init() {$/;"	f
smarta_run	src/smarta.c	/^static void smarta_run() {$/;"	f	file:
stanza	src/parser.h	/^    XmppStanza *stanza;$/;"	m	struct:_Parser
stanza	src/xmpp.h	/^    XmppStanza *stanza;$/;"	m	struct:_XmppStreamError
stanzacb	src/parser.h	/^    parser_stanza_callback stanzacb;$/;"	m	struct:_Parser
startcb	src/parser.h	/^    parser_start_callback startcb;$/;"	m	struct:_Parser
state	src/sha1.h	/^    uint32_t state[5];$/;"	m	struct:__anon1
state	src/xmpp.h	/^    XmppStreamState state;$/;"	m	struct:_XmppStream
stop	src/ae.h	/^    int stop;$/;"	m	struct:aeEventLoop
stream_error	src/xmpp.h	/^    XmppStreamError *stream_error;$/;"	m	struct:_XmppStream
stream_id	src/xmpp.h	/^    char *stream_id;$/;"	m	struct:_XmppStream
table	src/dict.h	/^    dictEntry **table;$/;"	m	struct:dictht
table	src/dict.h	/^    int table, index, safe;$/;"	m	struct:dictIterator
table	src/hash.c	/^    hash_t *table;$/;"	m	struct:_hash_iterator_t	file:
tail	src/adlist.h	/^    listNode *tail;$/;"	m	struct:list
test_cond	src/sds.c	/^#define test_cond(/;"	d	file:
test_data	src/sha1.c	/^static char *test_data[] = {$/;"	v	file:
test_report	src/sds.c	/^#define test_report(/;"	d	file:
test_results	src/sha1.c	/^static char *test_results[] = {$/;"	v	file:
text	src/xmpp.h	/^    char *text;$/;"	m	struct:_XmppStreamError
timeEventHead	src/ae.h	/^    aeTimeEvent *timeEventHead;$/;"	m	struct:aeEventLoop
timeEventNextId	src/ae.h	/^    long long timeEventNextId;$/;"	m	struct:aeEventLoop
timeInMilliseconds	src/dict.c	/^long long timeInMilliseconds(void) {$/;"	f
timeProc	src/ae.h	/^    aeTimeProc *timeProc;$/;"	m	struct:aeTimeEvent
timeout_stamp	src/xmpp.h	/^    uint64_t timeout_stamp;$/;"	m	struct:_XmppStream
tls_support	src/xmpp.h	/^    int tls_support;$/;"	m	struct:_XmppStream
type	src/dict.h	/^    dictType *type;$/;"	m	struct:dict
type	src/stanza.h	/^    XmppStanzaType type;$/;"	m	struct:_XmppStanza
type	src/xmpp.h	/^    XmppErrorType type;$/;"	m	struct:_XmppStreamError
uint16_t	src/sasl.c	/^  typedef unsigned short int        uint16_t;$/;"	t	file:
uint16_t	src/sha1.c	/^  typedef unsigned short int        uint16_t;$/;"	t	file:
uint32_t	src/md5.h	/^  typedef unsigned int              uint32_t;$/;"	t
uint32_t	src/sasl.c	/^  typedef unsigned int              uint32_t;$/;"	t	file:
uint32_t	src/sha1.c	/^  typedef unsigned int              uint32_t;$/;"	t	file:
uint8_t	src/sasl.c	/^  typedef unsigned char             uint8_t;$/;"	t	file:
uint8_t	src/sha1.c	/^  typedef unsigned char             uint8_t;$/;"	t	file:
usage	src/smarta.c	/^void usage() {$/;"	f
usage	src/smarta.h	/^    char *usage;$/;"	m	struct:_Command
used	src/dict.h	/^    unsigned long used;$/;"	m	struct:dictht
userdata	src/parser.h	/^    void *userdata;$/;"	m	struct:_Parser
userdata	src/xmpp.h	/^    void *userdata;$/;"	m	struct:_XmppStream
val	src/dict.h	/^    void *val;$/;"	m	struct:dictEntry
valDestructor	src/dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDup	src/dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
value	src/adlist.h	/^    void *value;$/;"	m	struct:listNode
value	src/hash.c	/^    void *value;$/;"	m	struct:_hashentry_t	file:
verbosity	src/smarta.h	/^    int verbosity;$/;"	m	struct:_Smarta
version	src/smarta.c	/^void version() {$/;"	f
wfds	src/ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	file:
wfileProc	src/ae.h	/^    aeFileProc *wfileProc;$/;"	m	struct:aeFileEvent
when_ms	src/ae.h	/^    long when_ms; \/* milliseconds *\/$/;"	m	struct:aeTimeEvent
when_sec	src/ae.h	/^    long when_sec; \/* seconds *\/$/;"	m	struct:aeTimeEvent
xmpp_jid_bare	src/jid.c	/^char *xmpp_jid_bare(const char *jid)$/;"	f
xmpp_jid_domain	src/jid.c	/^char *xmpp_jid_domain(const char *jid)$/;"	f
xmpp_jid_new	src/jid.c	/^char *xmpp_jid_new(const char *node,$/;"	f
xmpp_jid_node	src/jid.c	/^char *xmpp_jid_node(const char *jid)$/;"	f
xmpp_jid_resource	src/jid.c	/^char *xmpp_jid_resource(const char *jid)$/;"	f
xmpp_log	src/smarta.c	/^void xmpp_log(int level, const char *fmt, ...) {$/;"	f
xmpp_read	src/smarta.c	/^void xmpp_read(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
xmpp_send	src/xmpp.c	/^void xmpp_send(XmppStream *stream, XmppStanza *stanza) {$/;"	f
xmpp_send_raw	src/xmpp.c	/^void xmpp_send_raw(XmppStream *stream,$/;"	f
xmpp_send_raw_string	src/xmpp.c	/^void xmpp_send_raw_string(XmppStream *stream, char *fmt, ...) {$/;"	f
xmpp_snprintf	src/snprintf.c	/^int xmpp_snprintf (char *str,size_t count,const char *fmt,...)$/;"	f
xmpp_stanza_add_child	src/stanza.c	/^int xmpp_stanza_add_child(XmppStanza *stanza, XmppStanza *child)$/;"	f
xmpp_stanza_clone	src/stanza.c	/^XmppStanza *xmpp_stanza_clone(XmppStanza * const stanza) {$/;"	f
xmpp_stanza_copy	src/stanza.c	/^XmppStanza *xmpp_stanza_copy(const XmppStanza * const stanza) {$/;"	f
xmpp_stanza_get_attribute	src/stanza.c	/^char *xmpp_stanza_get_attribute(XmppStanza * const stanza,$/;"	f
xmpp_stanza_get_attribute_count	src/stanza.c	/^int xmpp_stanza_get_attribute_count(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_attributes	src/stanza.c	/^int xmpp_stanza_get_attributes(XmppStanza * const stanza,$/;"	f
xmpp_stanza_get_child_by_name	src/stanza.c	/^XmppStanza *xmpp_stanza_get_child_by_name(XmppStanza * const stanza, $/;"	f
xmpp_stanza_get_child_by_ns	src/stanza.c	/^XmppStanza *xmpp_stanza_get_child_by_ns(XmppStanza * const stanza,$/;"	f
xmpp_stanza_get_children	src/stanza.c	/^XmppStanza *xmpp_stanza_get_children(XmppStanza * const stanza) $/;"	f
xmpp_stanza_get_id	src/stanza.c	/^char *xmpp_stanza_get_id(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_name	src/stanza.c	/^char *xmpp_stanza_get_name(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_next	src/stanza.c	/^XmppStanza *xmpp_stanza_get_next(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_ns	src/stanza.c	/^char *xmpp_stanza_get_ns(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_text	src/stanza.c	/^char *xmpp_stanza_get_text(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_text_ptr	src/stanza.c	/^char *xmpp_stanza_get_text_ptr(XmppStanza * const stanza)$/;"	f
xmpp_stanza_get_type	src/stanza.c	/^char *xmpp_stanza_get_type(XmppStanza * const stanza)$/;"	f
xmpp_stanza_is_tag	src/stanza.c	/^int xmpp_stanza_is_tag(XmppStanza * const stanza)$/;"	f
xmpp_stanza_is_text	src/stanza.c	/^int xmpp_stanza_is_text(XmppStanza * const stanza)$/;"	f
xmpp_stanza_new	src/stanza.c	/^XmppStanza *xmpp_stanza_new() {$/;"	f
xmpp_stanza_release	src/stanza.c	/^int xmpp_stanza_release(XmppStanza * const stanza) {$/;"	f
xmpp_stanza_set_attribute	src/stanza.c	/^int xmpp_stanza_set_attribute(XmppStanza * const stanza,$/;"	f
xmpp_stanza_set_id	src/stanza.c	/^int xmpp_stanza_set_id(XmppStanza * const stanza,$/;"	f
xmpp_stanza_set_name	src/stanza.c	/^int xmpp_stanza_set_name(XmppStanza *stanza, $/;"	f
xmpp_stanza_set_ns	src/stanza.c	/^int xmpp_stanza_set_ns(XmppStanza * const stanza,$/;"	f
xmpp_stanza_set_text	src/stanza.c	/^int xmpp_stanza_set_text(XmppStanza *stanza,$/;"	f
xmpp_stanza_set_text_with_size	src/stanza.c	/^int xmpp_stanza_set_text_with_size(XmppStanza *stanza,$/;"	f
xmpp_stanza_set_type	src/stanza.c	/^int xmpp_stanza_set_type(XmppStanza * const stanza,$/;"	f
xmpp_stanza_to_text	src/stanza.c	/^int xmpp_stanza_to_text(XmppStanza *stanza,$/;"	f
xmpp_stream_auth	src/xmpp.c	/^static void xmpp_stream_auth(XmppStream * const stream, XmppStanza *mechanisms) {$/;"	f	file:
xmpp_stream_bind	src/xmpp.c	/^static void xmpp_stream_bind(XmppStream *stream, XmppStanza *bind) {$/;"	f	file:
xmpp_stream_feed	src/xmpp.c	/^int xmpp_stream_feed(XmppStream *stream, char *buffer, int len) {$/;"	f
xmpp_stream_get_jid	src/xmpp.c	/^char *xmpp_stream_get_jid(XmppStream *stream) {$/;"	f
xmpp_stream_get_pass	src/xmpp.c	/^char *xmpp_stream_get_pass(XmppStream *stream) {$/;"	f
xmpp_stream_new	src/xmpp.c	/^XmppStream *xmpp_stream_new(int fd) {$/;"	f
xmpp_stream_open	src/xmpp.c	/^int xmpp_stream_open(XmppStream *stream) {$/;"	f
xmpp_stream_session	src/xmpp.c	/^static void xmpp_stream_session(XmppStream *stream) {$/;"	f	file:
xmpp_stream_set_jid	src/xmpp.c	/^void xmpp_stream_set_jid(XmppStream *stream, const char *jid) {$/;"	f
xmpp_stream_set_pass	src/xmpp.c	/^void xmpp_stream_set_pass(XmppStream *stream, const char *pass) {$/;"	f
xmpp_stream_starttls	src/xmpp.c	/^static void xmpp_stream_starttls(XmppStream *stream) {$/;"	f	file:
xmpp_vsnprintf	src/snprintf.c	/^int xmpp_vsnprintf (char *str, size_t count, const char *fmt, va_list args)$/;"	f
yesnotoi	src/smarta.c	/^int yesnotoi(char *s) {$/;"	f
