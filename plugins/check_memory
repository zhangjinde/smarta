#!/usr/bin/env lua

-- check linux memory
-- author: ery.lee@gmail.com from monit.cn

require("plugin")

version="1.0.0"

-- do check
function check(opts) 
  local warn = opts["W"]
  local crit = opts["C"]

  local output = os.cmd("free -m o")
  local headers = {"total", "used", "free", "shared", "buffers", "cached"}
  local metrics = {string.match(output, "Mem:%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)%s+(%d+)")}
  if #metrics < 6 then 
    print("UNKNOWN - no memory data\n") 
    return  
  end
  local metrics = table.map(metrics, function(v) return tonumber(v) end)
  local memtab = table.zip(headers, metrics)
  memtab["usage"] = string.format("%.2f%%", (memtab["used"] * 100 / memtab["total"]))
  memtab["appused"] = memtab["used"] - memtab["buffers"] - memtab["cached"]
  memtab["appusage"] = string.format("%.2f%%", (memtab["appused"] * 100/ memtab["total"]))
  usage = memtab["used"] * 100 / memtab["total"]
  appusage = memtab["appused"] * 100/ memtab["total"]
  status = "OK"
  if crit and eval("return "..crit) then
    status = "CRITICAL"
  elseif warn and eval("return "..warn) then
    status = "WARNING"
  end
  print(string.format("%s - 总内存大小: %s(MB) 内存使用率: %s, 应用程序占用: %s", 
    status, memtab["total"], memtab["usage"], memtab["appusage"]))
  for k,v in pairs(memtab) do
    print(string.format("metric:%s: %s", k, v))
  end
end

-- usage
function usage() 
  print("Usage: check_memory [ -W warning | -C critical ]")
end

-- parse arguments
local long_opts = {
   help    = "h",
   warning = "W",
   critical = "C"
}

opts,optind = getopts(arg, "hW:C:", long_opts)

if opts["h"] then
  usage()
  return
end

-- parse arguments
ok, err = pcall(check, opts)
if not ok then
  print("UNKNOWN - plugin internal error\n")
  print(err)
end
