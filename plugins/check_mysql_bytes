#!/bin/bash
#: Title       : check_mysql_bytes
#: Date        : 2011-10-02
#: Author      : "Ery Lee" <ery.lee@gmail.com> from nodehub.cn
#: Version     : 1.0 
#: Description : check mysql traffic by "show global status like 'Bytes_%'"

#script metadata
version=1.0
scriptname=${0##*/}
timestamp=`date +%s`
description="check mysql throughput"
date_of_creation=2011-10-08
usage="$scriptname [-v | -h Host | -u User | -p Password | -w Warning | -c Critical]"
author="Ery Lee <ery.lee@gmail.com>"
home=${HOME}/.smarta
mkdir -p $home
tmpfile="$home/.${scriptname}"

#database query
query="show global status where Variable_name in('Bytes_received', 'Bytes_sent');"

usage() #@ DESCRIPTION: print usage information 
{       #@ USAGE: usage 
        #@ REQUIRES: variable defined: $scriptname 
  printf "%s - %s\n" "$scriptname" "$description" 
  printf "USAGE: %s\n" "$usage" 
} 
 
version() #@ DESCRIPTION: print version information 
{         #@ USAGE: version 
          #@ REQUIRES: variables defined: $scriptname, $author and $version 
  printf "%s version %s\n" "$scriptname" "$version" 
  printf "by %s, %d\n" "$author"  "${date_of_creation%%-*}" 
} 

## parse cli options, -v, -H, -u, -p, -w, -c
while getopts vhH:u:p:w:c: var 
do 
  case $var in 
    h) usage; exit ;; 
    v) version; exit ;; 
    H) host_opt="-h$OPTARG" ;; 
    u) user_opt="-u$OPTARG" ;;
    p) pass_opt="-p$OPTARG" ;;
    w) warn=$OPTARG ;;
    c) critical=$OPTARG ;;
  esac 
done 
shift $(( $OPTIND - 1 )) 

#warning threshold
if [ -n "$warn" ]; then
    warn=${warn//>=/'-ge'}
    warn=${warn//<=/'-le'}
    warn=${warn//>/'-gt'}
    warn=${warn//</'-lt'}
    warn=${warn//and/'-a'}
    warn=${warn//or/'-o'}
fi

#critical threshold
if [ -n "$critical" ]; then
    critical=${critical//>=/'-ge'}
    critical=${critical//<=/'-le'}
    critical=${critical//>/'-gt'}
    critical=${critical//</'-lt'}
    critical=${critical//and/'-a'}
    critical=${critical//or/'-o'}
fi

array=(`mysql $host_opt $user_opt $pass_opt -s -e "$query" | awk "{print $1 $2}"`)

i=0
len=${#array[*]}
while [ $i -lt $len ]; do
    if [ "Bytes_received" = "${array[$i]}" ]; then
        received=${array[$i+1]}
    elif [ "Bytes_sent" = "${array[$i]}" ]; then
        sent=${array[$i+1]}
    fi 
    let i++
done

if [ -z "$received" ]; then
    echo "UNKNOWN - mysql access error"
    echo ""
    echo $output
    exit -1
fi

if [ -f $tmpfile ]; then
    array=(`cat $tmpfile | awk "{print $1 $2}"`)
    len=${#array[*]}
    i=0
    while [ $i -lt $len ]; do
        if [ "timestamp" = "${array[$i]}" ]; then
            oldTimestamp=${array[$i+1]}
        elif [ "received" = "${array[$i]}" ]; then
            oldReceived=${array[$i+1]}
        elif [ "sent" = "${array[$i]}" ]; then
            oldSent=${array[$i+1]}
        fi 
        let i++
    done
fi

{
echo "timestamp $timestamp"
echo "received  $received"
echo "sent  $sent"
} > $tmpfile

if [ $oldTimestamp ]; then
    tdiff=$(($timestamp-$oldTimestamp))
fi

if [ $oldSent ]; then
    sDiff=$(($sent-$oldSent))
    bytes_sent_rate=$(($sDiff/$tdiff))
fi

if [ $oldReceived ]; then
    rDiff=$(($received-$oldReceived))
    bytes_received_rate=$(($rDiff/$tdiff))
fi

if [ $bytes_sent_rate ]; then
    if [ -n "$critical" ] && eval "test $critical"
    then
        status="CRITICAL"
    elif [ -n "$warn" ] && eval "test $warn"
    then
        status="WARNING"
    else
        status="OK"
    fi
    echo "$status - MYSQL 接收速率: $bytes_received_rate(Bps), 发送速率: $bytes_sent_rate(Bps)" 
else
    echo "OK - MYSQL 接收字节数: $received, 发送字节数: $sent"
fi

echo "metric:counter:bytes_sent: $sent"
echo "metric:counter:bytes_received: $received"
if [ $bytes_sent_rate ]; then
    echo "metric:bytes_sent_rate: $bytes_sent_rate"
fi
if [ $bytes_received_rate ]; then
    echo "metric:bytes_received_rate: $bytes_received_rate"
fi
echo ""

