#!/bin/bash
#: Title       : check_mysql_cmd
#: Date        : 2011-10-08
#: Author      : "Ery Lee" <ery.lee@gmail.com> from nodehub.cn
#: Version     : 1.0 
#: Description : check mysql commands

version=1.0
scriptname=${0##*/}
timestamp=`date +%s`
description="check mysql commands"
date_of_creation=2011-10-08
usage="$scriptname [-v | -h Host | -u User | -p Password | -w Warning | -c Critical]"
author="Ery Lee <ery.lee@gmail.com>"
home=${HOME}/.smarta
mkdir -p $home
tmpfile="$home/.${scriptname}"

#database query
query="show global status where Variable_name in('Questions','Com_select','Com_update','Com_insert','Com_delete','Com_commit','Com_rollback');"

usage() #@ DESCRIPTION: print usage information 
{       #@ USAGE: usage 
        #@ REQUIRES: variable defined: $scriptname 
  printf "%s - %s\n" "$scriptname" "$description" 
  printf "USAGE: %s\n" "$usage" 
} 
 
version() #@ DESCRIPTION: print version information 
{         #@ USAGE: version 
          #@ REQUIRES: variables defined: $scriptname, $author and $version 
  printf "%s version %s\n" "$scriptname" "$version" 
  printf "by %s, %d\n" "$author"  "${date_of_creation%%-*}" 
} 

## parse cli options, -v, -H, -u, -p, -w, -c
while getopts vhH:u:p:w:c: var 
do 
  case $var in 
    h) usage; exit ;; 
    v) version; exit ;; 
    H) host_opt="-h$OPTARG" ;; 
    u) user_opt="-u$OPTARG" ;;
    p) pass_opt="-p$OPTARG" ;;
    w) warn=$OPTARG ;;
    c) critical=$OPTARG ;;
  esac 
done 
shift $(( $OPTIND - 1 )) 

#warning threshold
if [ -n "$warn" ]; then
    warn=${warn//>=/'-ge'}
    warn=${warn//<=/'-le'}
    warn=${warn//>/'-gt'}
    warn=${warn//</'-lt'}
    warn=${warn//and/'-a'}
    warn=${warn//or/'-o'}
fi

#critical threshold
if [ -n "$critical" ]; then
    critical=${critical//>=/'-ge'}
    critical=${critical//<=/'-le'}
    critical=${critical//>/'-gt'}
    critical=${critical//</'-lt'}
    critical=${critical//and/'-a'}
    critical=${critical//or/'-o'}
fi

array=(`mysql $host_opt $user_opt $pass_opt -s -e "$query" | awk "{print $1 $2}"`)

i=0
len=${#array[*]}
while [ $i -lt $len ]; do
    if [ "Questions" = "${array[$i]}" ]; then
        questions=${array[$i+1]}
    elif [ "Com_select" = "${array[$i]}" ]; then
        com_select=${array[$i+1]}
    elif [ "Com_update" = "${array[$i]}" ]; then
        com_update=${array[$i+1]}
    elif [ "Com_insert" = "${array[$i]}" ]; then
        com_insert=${array[$i+1]}
    elif [ "Com_delete" = "${array[$i]}" ]; then
        com_delete=${array[$i+1]}
    elif [ "Com_commit" = "${array[$i]}" ]; then
        com_commit=${array[$i+1]}
    elif [ "Com_rollback" = "${array[$i]}" ]; then
        com_rollback=${array[$i+1]}
    fi
    let i++
done

if [ -z "$questions" ]; then
    echo "UNKNOWN - mysql access error"
    echo ""
    echo $output
    exit -1
fi

if [ -f $tmpfile ]; then
    array=(`cat $tmpfile | awk "{print $1 $2}"`)
    i=0
    len=${#array[*]}
    while [ $i -lt $len ]; do
        if [ "Timestamp" = "${array[$i]}" ]; then
            old_timestamp=${array[$i+1]}
        elif [ "Questions" = "${array[$i]}" ]; then
            old_questions=${array[$i+1]}
        elif [ "Com_select" = "${array[$i]}" ]; then
            old_com_select=${array[$i+1]}
        elif [ "Com_update" = "${array[$i]}" ]; then
            old_com_update=${array[$i+1]}
        elif [ "Com_insert" = "${array[$i]}" ]; then
            old_com_insert=${array[$i+1]}
        elif [ "Com_delete" = "${array[$i]}" ]; then
            old_com_delete=${array[$i+1]}
        elif [ "Com_commit" = "${array[$i]}" ]; then
            old_com_commit=${array[$i+1]}
        elif [ "Com_rollback" = "${array[$i]}" ]; then
            old_com_rollback=${array[$i+1]}
        fi 
        let i++
    done
fi

{
echo "Timestamp $timestamp"
echo "Questions $questions"
echo "Com_select $com_select"
echo "Com_update $com_update"
echo "Com_insert $com_insert"
echo "Com_delete $com_delete"
echo "Com_commit $com_commit"
echo "Com_rollback $com_rollback"
} > $tmpfile

if [ $old_timestamp ]; then
    tdiff=$(($timestamp-$old_timestamp))
fi

if [ $old_questions ]; then
    diff=$(($questions-$old_questions))
    questions_rate=$(($diff/$tdiff))
fi

if [ $old_com_select ]; then
    diff=$(($com_select-$old_com_select))
    com_select_rate=$(($diff/$tdiff))
fi

if [ $old_com_insert ]; then
    diff=$(($com_insert-$old_com_insert))
    com_insert_rate=$(($diff/$tdiff))
fi

if [ $questions_rate ]; then
    if [ -n "$critical" ] && eval "test $critical"
    then
        status="CRITICAL"
    elif [ -n "$warn" ] && eval "test $warn"
    then
        status="WARNING"
    else
        status="OK"
    fi
    echo "$status - MYSQL总请求次数: $questions, 请求速率: $questions_rate(次/每秒); 查询总次数: $com_select, 查询速率: $com_select_rate(次/每秒); 总插入次数: $com_insert, 插入速率: $com_insert_rate(次/每秒)" 
else
    echo "OK - MYSQL总请求次数: $questions, 查询总次数: $com_select"
fi
echo "metric:counter:questions: $questions"
echo "metric:counter:com_select: $com_select"
echo "metric:counter:com_insert: $com_insert"
echo "metric:questions_rate: $questions_rate"
echo "metric:com_select_rate: $com_select_rate"
echo "metric:com_insert_rate: $com_insert_rate"

echo ""
